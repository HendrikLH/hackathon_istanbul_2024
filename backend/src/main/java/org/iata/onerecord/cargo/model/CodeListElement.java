
package org.iata.onerecord.cargo.model;

import cz.cvut.kbss.jopa.model.annotations.*;
import cz.cvut.kbss.jopa.vocabulary.RDFS;
import lombok.EqualsAndHashCode;
import lombok.EqualsAndHashCode.Exclude;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.iata.onerecord.cargo.Vocabulary;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;


/**
 * Embedded object to transmit codes from non-RDF code lists in 1R in a semi-structured way. Code lists may be externally maintained codes (such as HS codes) or carrier-specific codes. If a code is present in RDF-form as Named Individual (like in the 1R core code lists ontology), it suffices to put in its IRI
 * 
 * This class was generated by OWL2Java 1.1.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_CodeListElement )
@SuperBuilder
@EqualsAndHashCode
@NoArgsConstructor
public class CodeListElement
    implements Serializable
{

    @Id(generated = true)
    protected String id;
    @OWLAnnotationProperty(iri = RDFS.LABEL)
    protected String name;
    @OWLAnnotationProperty(iri = cz.cvut.kbss.jopa.vocabulary.DC.Elements.DESCRIPTION)
    protected String description;
    @Types
    @Exclude
    protected Set<String> types;
    @Properties
    protected Map<String, Set<String>> properties;
    /**
     * Code or short version of a code, for example "CH" for Switzerland when referring to the UN/LOCODE code list
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_code)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String code;
    /**
     * Description or long version of the code, for example "Switzerland" for Switzerland when referring to the UN/LOCODE code list
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_codeDescription)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String codeDescription;
    /**
     * Integer indicating the level of a code if a codelists is hierarchical, for example HS-Codes
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_codeLevel)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#integer", max = 1)
    })
    protected Integer codeLevel;
    /**
     * Official name of the code list without version number when direct reference is not possible, for example "UN/LOCODE" when referring to the UN/LOCODE code list
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_codeListName)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String codeListName;
    /**
     * URL to access the code list the code is taken from, for example "https://unece.org/trade/cefact/unlocode-code-list-country-and-territory" for UN/LOCODE.
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_codeListReference)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String codeListReference;
    /**
     * Version of the code list, for example "223-1" for UN/LOCODE. Used if the property codeListName is used or the version is not apparent from the resource referred to in property codeListReference.
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_codeListVersion)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String codeListVersion;

    public void setId(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    public void setTypes(Set<String> types) {
        this.types = types;
    }

    public Set<String> getTypes() {
        return types;
    }

    public void setProperties(Map<String, Set<String>> properties) {
        this.properties = properties;
    }

    public Map<String, Set<String>> getProperties() {
        return properties;
    }

    @Override
    public String toString() {
        //concat and print of not null: id, code, name
        return "CodeListElement {" +
                "id='" + id + '\'' +
                ", code='" + code + '\'' +
                ", name='" + name + '\'' +
                '}';
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }

    public void setCodeDescription(String codeDescription) {
        this.codeDescription = codeDescription;
    }

    public String getCodeDescription() {
        return codeDescription;
    }

    public void setCodeLevel(Integer codeLevel) {
        this.codeLevel = codeLevel;
    }

    public Integer getCodeLevel() {
        return codeLevel;
    }

    public void setCodeListName(String codeListName) {
        this.codeListName = codeListName;
    }

    public String getCodeListName() {
        return codeListName;
    }

    public void setCodeListReference(String codeListReference) {
        this.codeListReference = codeListReference;
    }

    public String getCodeListReference() {
        return codeListReference;
    }

    public void setCodeListVersion(String codeListVersion) {
        this.codeListVersion = codeListVersion;
    }

    public String getCodeListVersion() {
        return codeListVersion;
    }

}
