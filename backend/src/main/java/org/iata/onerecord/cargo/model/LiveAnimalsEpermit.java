
package org.iata.onerecord.cargo.model;

import cz.cvut.kbss.jopa.model.annotations.*;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;
import org.iata.onerecord.cargo.Vocabulary;

import java.time.OffsetDateTime;
import java.util.Set;


/**
 * Epermit for Live Animals details
 * 
 * This class was generated by OWL2Java 1.1.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_LiveAnimalsEpermit )
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class LiveAnimalsEpermit
    extends LogisticsObject
{

    /**
     * Reference to the Organization that fulfills the role of the consignee, for a LiveAnimalsEpermit it has to include complete name and address (box 3)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_consignee)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Organization consignee;
    /**
     * Reference to the pieces and properties linked to the Permit (box 7 to 12)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_consignments)
    protected Set<EpermitConsignment> consignments;
    /**
     * Code specifying the document name. (box 1)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_permitTypeCode)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected CodeListElement permitTypeCode;
    /**
     * List of all the signatures of the Epermit (applicant box 4, issuing authority box 6, issuer box 13 and examining authority box 14)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_signatures)
    protected Set<EpermitSignature> signatures;
    /**
     * Code indicating the purpose of the transaction (box 5a)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_transactionPurposeCode)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected TransactionPurposeCode transactionPurposeCode;
    /**
     * Code specifying the transport document name (box 15)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_transportContractTypeCode)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected CodeListElement transportContractTypeCode;
    /**
     * Indicates if the permit is a copy (true) or an original (false) (box 1)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_copyIndicator)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#boolean", max = 1)
    })
    protected Boolean copyIndicator;
    /**
     * The original number is a unique number allocated to each document by the relevant Management Authority. (box 1)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_epermitNumber)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String epermitNumber;
    /**
     * Description if TypeCode is Other (box 1)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_permitTypeOtherDescription)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String permitTypeOtherDescription;
    /**
     * Special conditions (box 5)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_specialConditions)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String specialConditions;
    /**
     * Purpose of the transaction in free text (box 5a)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_transactionPurpose)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String transactionPurpose;
    /**
     * Reference to the Air Waybill or other transport contract document (box 15)
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_transportContractId)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String transportContractId;
    /**
     * Validity start date based on usage context
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_validFrom)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#dateTime", max = 1)
    })
    protected OffsetDateTime validFrom;
    /**
     * Validity end date (date of expiry) based on usage context
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_validUntil)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#dateTime", max = 1)
    })
    protected OffsetDateTime validUntil;

    public void setConsignee(Organization consignee) {
        this.consignee = consignee;
    }

    public Organization getConsignee() {
        return consignee;
    }

    public void setConsignments(Set<EpermitConsignment> consignments) {
        this.consignments = consignments;
    }

    public Set<EpermitConsignment> getConsignments() {
        return consignments;
    }

    public void setPermitTypeCode(CodeListElement permitTypeCode) {
        this.permitTypeCode = permitTypeCode;
    }

    public CodeListElement getPermitTypeCode() {
        return permitTypeCode;
    }

    public void setSignatures(Set<EpermitSignature> signatures) {
        this.signatures = signatures;
    }

    public Set<EpermitSignature> getSignatures() {
        return signatures;
    }

    public void setTransactionPurposeCode(TransactionPurposeCode transactionPurposeCode) {
        this.transactionPurposeCode = transactionPurposeCode;
    }

    public TransactionPurposeCode getTransactionPurposeCode() {
        return transactionPurposeCode;
    }

    public void setTransportContractTypeCode(CodeListElement transportContractTypeCode) {
        this.transportContractTypeCode = transportContractTypeCode;
    }

    public CodeListElement getTransportContractTypeCode() {
        return transportContractTypeCode;
    }

    public void setCopyIndicator(Boolean copyIndicator) {
        this.copyIndicator = copyIndicator;
    }

    public Boolean getCopyIndicator() {
        return copyIndicator;
    }

    public void setEpermitNumber(String epermitNumber) {
        this.epermitNumber = epermitNumber;
    }

    public String getEpermitNumber() {
        return epermitNumber;
    }

    public void setPermitTypeOtherDescription(String permitTypeOtherDescription) {
        this.permitTypeOtherDescription = permitTypeOtherDescription;
    }

    public String getPermitTypeOtherDescription() {
        return permitTypeOtherDescription;
    }

    public void setSpecialConditions(String specialConditions) {
        this.specialConditions = specialConditions;
    }

    public String getSpecialConditions() {
        return specialConditions;
    }

    public void setTransactionPurpose(String transactionPurpose) {
        this.transactionPurpose = transactionPurpose;
    }

    public String getTransactionPurpose() {
        return transactionPurpose;
    }

    public void setTransportContractId(String transportContractId) {
        this.transportContractId = transportContractId;
    }

    public String getTransportContractId() {
        return transportContractId;
    }

    public void setValidFrom(OffsetDateTime validFrom) {
        this.validFrom = validFrom;
    }

    public OffsetDateTime getValidFrom() {
        return validFrom;
    }

    public void setValidUntil(OffsetDateTime validUntil) {
        this.validUntil = validUntil;
    }

    public OffsetDateTime getValidUntil() {
        return validUntil;
    }

}
