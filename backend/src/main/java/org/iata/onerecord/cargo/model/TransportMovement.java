
package org.iata.onerecord.cargo.model;

import cz.cvut.kbss.jopa.model.annotations.*;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.iata.onerecord.cargo.Vocabulary;

import java.util.Set;


/**
 * Activity to describe transports, replaces the TransportSegment in v1.1 and above
 * 
 * This class was generated by OWL2Java 1.1.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_TransportMovement )
@SuperBuilder
@EqualsAndHashCode(onlyExplicitlyIncluded = true, callSuper = false)
@NoArgsConstructor
public class TransportMovement
    extends LogisticsActivity
{

    /**
     * Reference to the arrival Location
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_arrivalLocation)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Location arrivalLocation;
    /**
     * References to CO2Emissions
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_co2Emissions)
    protected Set<CO2Emissions> co2Emissions;
    /**
     * Reference to the depature Location
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_departureLocation)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Location departureLocation;
    /**
     * Information about the calculated distance
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_distanceCalculated)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Value distanceCalculated;
    /**
     * Information about the measured distance
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_distanceMeasured)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Value distanceMeasured;
    /**
     * Information about the calculated fuel amount
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_fuelAmountCalculated)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Value fuelAmountCalculated;
    /**
     * Information about the measured fuel amount
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_fuelAmountMeasured)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Value fuelAmountMeasured;
    /**
     * References to all actions of type Loading performed for the TransportMovement
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_loadingActions)
    protected Set<Loading> loadingActions;
    /**
     * Mode of transport code, refer to UNECE Rec. 19 https://unece.org/fileadmin/DAM/cefact/recommendations/rec19/rec19_1cf19e.pdf
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_modeCode)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected ModeCode modeCode;
    /**
     * Pre-Carriage, Main-Carriage or On-Carriage
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_modeQualifier)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected ModeQualifier modeQualifier;
    /**
     * Information about times related to the movement (milestone list to be defined)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_movementTimes)
    protected Set<MovementTime> movementTimes;
    /**
     * Reference to the TransportMeans operating the TransportMovement
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_operatingTransportMeans)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected TransportMeans operatingTransportMeans;
    /**
     * e.g. Kerosene, Diesel, SAF, Electricity [renewable], Electricity [non-renewable]
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_fuelType)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String fuelType;
    /**
     * Seal identifier
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_seal)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String seal;
    /**
     * Airline flight number, or rail/truck/maritime line id
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_transportIdentifier)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    @EqualsAndHashCode.Include
    protected String transportIdentifier;

    public void setArrivalLocation(Location arrivalLocation) {
        this.arrivalLocation = arrivalLocation;
    }

    public Location getArrivalLocation() {
        return arrivalLocation;
    }

    public void setCo2Emissions(Set<CO2Emissions> co2Emissions) {
        this.co2Emissions = co2Emissions;
    }

    public Set<CO2Emissions> getCo2Emissions() {
        return co2Emissions;
    }

    public void setDepartureLocation(Location departureLocation) {
        this.departureLocation = departureLocation;
    }

    public Location getDepartureLocation() {
        return departureLocation;
    }

    public void setDistanceCalculated(Value distanceCalculated) {
        this.distanceCalculated = distanceCalculated;
    }

    public Value getDistanceCalculated() {
        return distanceCalculated;
    }

    public void setDistanceMeasured(Value distanceMeasured) {
        this.distanceMeasured = distanceMeasured;
    }

    public Value getDistanceMeasured() {
        return distanceMeasured;
    }

    public void setFuelAmountCalculated(Value fuelAmountCalculated) {
        this.fuelAmountCalculated = fuelAmountCalculated;
    }

    public Value getFuelAmountCalculated() {
        return fuelAmountCalculated;
    }

    public void setFuelAmountMeasured(Value fuelAmountMeasured) {
        this.fuelAmountMeasured = fuelAmountMeasured;
    }

    public Value getFuelAmountMeasured() {
        return fuelAmountMeasured;
    }

    public void setLoadingActions(Set<Loading> loadingActions) {
        this.loadingActions = loadingActions;
    }

    public Set<Loading> getLoadingActions() {
        return loadingActions;
    }

    public void setModeCode(ModeCode modeCode) {
        this.modeCode = modeCode;
    }

    public ModeCode getModeCode() {
        return modeCode;
    }

    public void setModeQualifier(ModeQualifier modeQualifier) {
        this.modeQualifier = modeQualifier;
    }

    public ModeQualifier getModeQualifier() {
        return modeQualifier;
    }

    public void setMovementTimes(Set<MovementTime> movementTimes) {
        this.movementTimes = movementTimes;
    }

    public Set<MovementTime> getMovementTimes() {
        return movementTimes;
    }

    public void setOperatingTransportMeans(TransportMeans operatingTransportMeans) {
        this.operatingTransportMeans = operatingTransportMeans;
    }

    public TransportMeans getOperatingTransportMeans() {
        return operatingTransportMeans;
    }

    public void setFuelType(String fuelType) {
        this.fuelType = fuelType;
    }

    public String getFuelType() {
        return fuelType;
    }

    public void setSeal(String seal) {
        this.seal = seal;
    }

    public String getSeal() {
        return seal;
    }

    public void setTransportIdentifier(String transportIdentifier) {
        this.transportIdentifier = transportIdentifier;
    }

    public String getTransportIdentifier() {
        return transportIdentifier;
    }

}
