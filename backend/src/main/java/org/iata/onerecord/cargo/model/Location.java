
package org.iata.onerecord.cargo.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import cz.cvut.kbss.jopa.model.annotations.*;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.apache.commons.lang3.ObjectUtils;
import org.iata.onerecord.cargo.Vocabulary;

import java.util.Set;


/**
 * Location describes a physical location, e.g. an airport, a warehouse or a truck deck
 * 
 * This class was generated by OWL2Java 1.1.4
 * 
 */
@OWLClass(iri = Vocabulary.s_c_Location )
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
public class Location
    extends PhysicalLogisticsObject
{

    //helper function to station IATA code of event
    @JsonIgnore
    public String getCode() {
        if(!ObjectUtils.isEmpty(this.getLocationCodes()) && this.getLocationCodes().stream().findFirst().isPresent()) {
            return this.getLocationCodes().stream().findFirst().get().getCode();
        }
        return null;            
    }

    /**
     * Address details
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_address)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Address address;
    /**
     * Geolocation details
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_geolocation)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Geolocation geolocation;
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_locationCodes)
    protected Set<CodeListElement> locationCodes;
    /**
     * References to the Actions happening at the Location
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_onsiteActions)
    protected Set<LogisticsAction> onsiteActions;
    /**
     * Reference to the Location this is a Sublocation of
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_subLocationOf)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = Vocabulary.s_c_Thing, max = 1)
    })
    protected Location subLocationOf;
    /**
     * References to Sublocations that describe the Location in more detail
     * 
     */
    @OWLObjectProperty(iri = Vocabulary.s_p_subLocations)
    protected Set<Location> subLocations;
    /**
     * Full name of the location
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_locationName)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String locationName;
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    @OWLDataProperty(iri = Vocabulary.s_p_locationType)
    @ParticipationConstraints({
        @ParticipationConstraint(owlObjectIRI = "http://www.w3.org/2001/XMLSchema#string", max = 1)
    })
    protected String locationType;

    public void setAddress(Address address) {
        this.address = address;
    }

    public Address getAddress() {
        return address;
    }

    public void setGeolocation(Geolocation geolocation) {
        this.geolocation = geolocation;
    }

    public Geolocation getGeolocation() {
        return geolocation;
    }

    public void setLocationCodes(Set<CodeListElement> locationCodes) {
        this.locationCodes = locationCodes;
    }

    public Set<CodeListElement> getLocationCodes() {
        return locationCodes;
    }

    public void setOnsiteActions(Set<LogisticsAction> onsiteActions) {
        this.onsiteActions = onsiteActions;
    }

    public Set<LogisticsAction> getOnsiteActions() {
        return onsiteActions;
    }

    public void setSubLocationOf(Location subLocationOf) {
        this.subLocationOf = subLocationOf;
    }

    public Location getSubLocationOf() {
        return subLocationOf;
    }

    public void setSubLocations(Set<Location> subLocations) {
        this.subLocations = subLocations;
    }

    public Set<Location> getSubLocations() {
        return subLocations;
    }

    public void setLocationName(String locationName) {
        this.locationName = locationName;
    }

    public String getLocationName() {
        return locationName;
    }

    public void setLocationType(String locationType) {
        this.locationType = locationType;
    }

    public String getLocationType() {
        return locationType;
    }

}
