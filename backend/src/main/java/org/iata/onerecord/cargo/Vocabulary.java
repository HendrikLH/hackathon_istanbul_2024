
package org.iata.onerecord.cargo;

import org.semanticweb.owlapi.model.IRI;


/**
 * This class was generated by OWL2Java 1.1.4
 * 
 */
public class Vocabulary {

    public final static String ONTOLOGY_IRI_cargo = "https://onerecord.iata.org/ns/cargo";
    public final static String ONTOLOGY_IRI_cargo_generated = "https://onerecord.iata.org/ns/cargo-generated";
    public final static String s_c_Thing = "http://www.w3.org/2002/07/owl#Thing";
    public final static IRI c_Thing = IRI.create(s_c_Thing);
    /**
     * Restricted code list for acceptable action times
     * 
     */
    public final static String s_c_ActionTimeType = "https://onerecord.iata.org/ns/cargo#ActionTimeType";
    public final static IRI c_ActionTimeType = IRI.create(s_c_ActionTimeType);
    /**
     * Embedded object to create a sequence of Activities in the context of a Service
     * 
     */
    public final static String s_c_ActivitySequence = "https://onerecord.iata.org/ns/cargo#ActivitySequence";
    public final static IRI c_ActivitySequence = IRI.create(s_c_ActivitySequence);
    /**
     * Superclass: Actors are Persons or entities acting like a single person
     * 
     */
    public final static String s_c_Actor = "https://onerecord.iata.org/ns/cargo#Actor";
    public final static IRI c_Actor = IRI.create(s_c_Actor);
    /**
     * Address details
     * 
     */
    public final static String s_c_Address = "https://onerecord.iata.org/ns/cargo#Address";
    public final static IRI c_Address = IRI.create(s_c_Address);
    /**
     * Adjustments in the context of CASS records
     * 
     */
    public final static String s_c_Adjustments = "https://onerecord.iata.org/ns/cargo#Adjustments";
    public final static IRI c_Adjustments = IRI.create(s_c_Adjustments);
    /**
     * Answer holds the answer to one Question and is provided by the executioner of the check
     * 
     */
    public final static String s_c_Answer = "https://onerecord.iata.org/ns/cargo#Answer";
    public final static IRI c_Answer = IRI.create(s_c_Answer);
    /**
     * In the context of CASS2. process, BillingDetails object is used to integrate specific Billing and Settlement data requirements
     * 
     */
    public final static String s_c_BillingDetails = "https://onerecord.iata.org/ns/cargo#BillingDetails";
    public final static IRI c_BillingDetails = IRI.create(s_c_BillingDetails);
    /**
     * Booking object refers to a confirmed booking
     * 
     */
    public final static String s_c_Booking = "https://onerecord.iata.org/ns/cargo#Booking";
    public final static IRI c_Booking = IRI.create(s_c_Booking);
    /**
     * Booking details
     * 
     */
    public final static String s_c_BookingOption = "https://onerecord.iata.org/ns/cargo#BookingOption";
    public final static IRI c_BookingOption = IRI.create(s_c_BookingOption);
    /**
     * Request object, refers to the Quote request or Booking request 
     * 
     */
    public final static String s_c_BookingOptionRequest = "https://onerecord.iata.org/ns/cargo#BookingOptionRequest";
    public final static IRI c_BookingOptionRequest = IRI.create(s_c_BookingOptionRequest);
    /**
     * Restricted code list containing the statuses of a booking option
     * 
     */
    public final static String s_c_BookingOptionStatus = "https://onerecord.iata.org/ns/cargo#BookingOptionStatus";
    public final static IRI c_BookingOptionStatus = IRI.create(s_c_BookingOptionStatus);
    /**
     * BookingPreferences details
     * 
     */
    public final static String s_c_BookingPreferences = "https://onerecord.iata.org/ns/cargo#BookingPreferences";
    public final static IRI c_BookingPreferences = IRI.create(s_c_BookingPreferences);
    /**
     * A party, usually the freight forwarder, creates the BookingRequest in order to confirm the booking to the Carrier
     * 
     */
    public final static String s_c_BookingRequest = "https://onerecord.iata.org/ns/cargo#BookingRequest";
    public final static IRI c_BookingRequest = IRI.create(s_c_BookingRequest);
    /**
     * Simplified shipment object that is to be used only for the distribution scope where only a subset of data is known priori to operational phase.
     * 
     */
    public final static String s_c_BookingShipment = "https://onerecord.iata.org/ns/cargo#BookingShipment";
    public final static IRI c_BookingShipment = IRI.create(s_c_BookingShipment);
    /**
     * Restricted code list containing the possible statuses of a booking
     * 
     */
    public final static String s_c_BookingStatus = "https://onerecord.iata.org/ns/cargo#BookingStatus";
    public final static IRI c_BookingStatus = IRI.create(s_c_BookingStatus);
    /**
     * Previsouly called Schedule. This object refers to times used for the Booking Option Request (preferences part of the request) or the Booking Option (times sur as LAT where there is a commitment from the carrier)
     * 
     */
    public final static String s_c_BookingTimes = "https://onerecord.iata.org/ns/cargo#BookingTimes";
    public final static IRI c_BookingTimes = IRI.create(s_c_BookingTimes);
    /**
     * CO2 Calculation
     * 
     */
    public final static String s_c_CO2Emissions = "https://onerecord.iata.org/ns/cargo#CO2Emissions";
    public final static IRI c_CO2Emissions = IRI.create(s_c_CO2Emissions);
    /**
     * Company details of carriers
     * 
     */
    public final static String s_c_Carrier = "https://onerecord.iata.org/ns/cargo#Carrier";
    public final static IRI c_Carrier = IRI.create(s_c_Carrier);
    /**
     * Carrier product details
     * 
     */
    public final static String s_c_CarrierProduct = "https://onerecord.iata.org/ns/cargo#CarrierProduct";
    public final static IRI c_CarrierProduct = IRI.create(s_c_CarrierProduct);
    /**
     * Product additional details
     * 
     */
    public final static String s_c_Characteristic = "https://onerecord.iata.org/ns/cargo#Characteristic";
    public final static IRI c_Characteristic = IRI.create(s_c_Characteristic);
    /**
     * Action to describe a check
     * 
     */
    public final static String s_c_Check = "https://onerecord.iata.org/ns/cargo#Check";
    public final static IRI c_Check = IRI.create(s_c_Check);
    /**
     * CheckTemplate is the body of a check, holding links to multiple Question LOs and is provided by the party in charge of the template that is used
     * 
     * 
     */
    public final static String s_c_CheckTemplate = "https://onerecord.iata.org/ns/cargo#CheckTemplate";
    public final static IRI c_CheckTemplate = IRI.create(s_c_CheckTemplate);
    /**
     * CheckTotalResult holds the result of a Check and should be provided by the party executing and accounting for the check result
     * 
     */
    public final static String s_c_CheckTotalResult = "https://onerecord.iata.org/ns/cargo#CheckTotalResult";
    public final static IRI c_CheckTotalResult = IRI.create(s_c_CheckTotalResult);
    /**
     * Embedded object to transmit codes from non-RDF code lists in 1R in a semi-structured way. Code lists may be externally maintained codes (such as HS codes) or carrier-specific codes. If a code is present in RDF-form as Named Individual (like in the 1R core code lists ontology), it suffices to put in its IRI
     * 
     */
    public final static String s_c_CodeListElement = "https://onerecord.iata.org/ns/cargo#CodeListElement";
    public final static IRI c_CodeListElement = IRI.create(s_c_CodeListElement);
    /**
     * Company details
     * 
     */
    public final static String s_c_Company = "https://onerecord.iata.org/ns/cargo#Company";
    public final static IRI c_Company = IRI.create(s_c_Company);
    /**
     * Action to describe build-up or break-down of LoadingUnits
     * 
     */
    public final static String s_c_Composing = "https://onerecord.iata.org/ns/cargo#Composing";
    public final static IRI c_Composing = IRI.create(s_c_Composing);
    /**
     * Restricted code list for Composing subtypes
     * 
     */
    public final static String s_c_CompositionType = "https://onerecord.iata.org/ns/cargo#CompositionType";
    public final static IRI c_CompositionType = IRI.create(s_c_CompositionType);
    /**
     * Contact details
     * 
     */
    public final static String s_c_ContactDetail = "https://onerecord.iata.org/ns/cargo#ContactDetail";
    public final static IRI c_ContactDetail = IRI.create(s_c_ContactDetail);
    /**
     * Open code list for types of contact details
     * 
     */
    public final static String s_c_ContactDetailType = "https://onerecord.iata.org/ns/cargo#ContactDetailType";
    public final static IRI c_ContactDetailType = IRI.create(s_c_ContactDetailType);
    /**
     * Open code list for roles of a contact
     * 
     */
    public final static String s_c_ContactRole = "https://onerecord.iata.org/ns/cargo#ContactRole";
    public final static IRI c_ContactRole = IRI.create(s_c_ContactRole);
    /**
     * Embedded object to transmit currencies
     * 
     */
    public final static String s_c_CurrencyValue = "https://onerecord.iata.org/ns/cargo#CurrencyValue";
    public final static IRI c_CurrencyValue = IRI.create(s_c_CurrencyValue);
    /**
     * Customs information details
     * 
     */
    public final static String s_c_CustomsInformation = "https://onerecord.iata.org/ns/cargo#CustomsInformation";
    public final static IRI c_CustomsInformation = IRI.create(s_c_CustomsInformation);
    /**
     * Dangerous goods declaration
     * 
     */
    public final static String s_c_DgDeclaration = "https://onerecord.iata.org/ns/cargo#DgDeclaration";
    public final static IRI c_DgDeclaration = IRI.create(s_c_DgDeclaration);
    /**
     * Details of the radioactive products 
     * 
     */
    public final static String s_c_DgProductRadioactive = "https://onerecord.iata.org/ns/cargo#DgProductRadioactive";
    public final static IRI c_DgProductRadioactive = IRI.create(s_c_DgProductRadioactive);
    /**
     * Details of the radioactive isotope contained in the product
     * 
     */
    public final static String s_c_DgRadioactiveIsotope = "https://onerecord.iata.org/ns/cargo#DgRadioactiveIsotope";
    public final static IRI c_DgRadioactiveIsotope = IRI.create(s_c_DgRadioactiveIsotope);
    /**
     * Dimension details
     * 
     */
    public final static String s_c_Dimensions = "https://onerecord.iata.org/ns/cargo#Dimensions";
    public final static IRI c_Dimensions = IRI.create(s_c_Dimensions);
    /**
     * Restricted code list for the direction of a MovementTime
     * 
     */
    public final static String s_c_DirectionType = "https://onerecord.iata.org/ns/cargo#DirectionType";
    public final static IRI c_DirectionType = IRI.create(s_c_DirectionType);
    /**
     * Details of the pieces (Live animals) of the permit and specific information such as quantity measured and used to date quota
     * 
     */
    public final static String s_c_EpermitConsignment = "https://onerecord.iata.org/ns/cargo#EpermitConsignment";
    public final static IRI c_EpermitConsignment = IRI.create(s_c_EpermitConsignment);
    /**
     * Signature details of the Epermit for Live Animals
     * 
     */
    public final static String s_c_EpermitSignature = "https://onerecord.iata.org/ns/cargo#EpermitSignature";
    public final static IRI c_EpermitSignature = IRI.create(s_c_EpermitSignature);
    /**
     * Restricted code list for acceptable event times
     * 
     */
    public final static String s_c_EventTimeType = "https://onerecord.iata.org/ns/cargo#EventTimeType";
    public final static IRI c_EventTimeType = IRI.create(s_c_EventTimeType);
    /**
     * Restricted code list for the execution status of activities
     * 
     */
    public final static String s_c_ExecutionStatus = "https://onerecord.iata.org/ns/cargo#ExecutionStatus";
    public final static IRI c_ExecutionStatus = IRI.create(s_c_ExecutionStatus);
    /**
     * Reference documents details
     * 
     */
    public final static String s_c_ExternalReference = "https://onerecord.iata.org/ns/cargo#ExternalReference";
    public final static IRI c_ExternalReference = IRI.create(s_c_ExternalReference);
    /**
     * Geolocation details - e.g. for drones, automated vehicles
     * 
     */
    public final static String s_c_Geolocation = "https://onerecord.iata.org/ns/cargo#Geolocation";
    public final static IRI c_Geolocation = IRI.create(s_c_Geolocation);
    /**
     * Insurance details
     * 
     */
    public final static String s_c_Insurance = "https://onerecord.iata.org/ns/cargo#Insurance";
    public final static IRI c_Insurance = IRI.create(s_c_Insurance);
    /**
     * IoT Device details
     * 
     */
    public final static String s_c_IotDevice = "https://onerecord.iata.org/ns/cargo#IotDevice";
    public final static IRI c_IotDevice = IRI.create(s_c_IotDevice);
    /**
     * Item details
     * 
     */
    public final static String s_c_Item = "https://onerecord.iata.org/ns/cargo#Item";
    public final static IRI c_Item = IRI.create(s_c_Item);
    /**
     * Dangerous Goods subtype of Item
     * 
     */
    public final static String s_c_ItemDg = "https://onerecord.iata.org/ns/cargo#ItemDg";
    public final static IRI c_ItemDg = IRI.create(s_c_ItemDg);
    /**
     * Epermit for Live Animals details
     * 
     */
    public final static String s_c_LiveAnimalsEpermit = "https://onerecord.iata.org/ns/cargo#LiveAnimalsEpermit";
    public final static IRI c_LiveAnimalsEpermit = IRI.create(s_c_LiveAnimalsEpermit);
    /**
     * Restricted code list for the Load Type of a piece or shipment
     * 
     */
    public final static String s_c_LoadType = "https://onerecord.iata.org/ns/cargo#LoadType";
    public final static IRI c_LoadType = IRI.create(s_c_LoadType);
    /**
     * Action to describe onloading or offloading TransportMeans
     * 
     */
    public final static String s_c_Loading = "https://onerecord.iata.org/ns/cargo#Loading";
    public final static IRI c_Loading = IRI.create(s_c_Loading);
    /**
     * LoadingMaterial describes transportable, complementary non-Piece objects such as dry ice or nets
     * 
     */
    public final static String s_c_LoadingMaterial = "https://onerecord.iata.org/ns/cargo#LoadingMaterial";
    public final static IRI c_LoadingMaterial = IRI.create(s_c_LoadingMaterial);
    /**
     * Restricted code list for Loading subtypes
     * 
     */
    public final static String s_c_LoadingType = "https://onerecord.iata.org/ns/cargo#LoadingType";
    public final static IRI c_LoadingType = IRI.create(s_c_LoadingType);
    /**
     * Common loading unit/container details
     * 
     */
    public final static String s_c_LoadingUnit = "https://onerecord.iata.org/ns/cargo#LoadingUnit";
    public final static IRI c_LoadingUnit = IRI.create(s_c_LoadingUnit);
    /**
     * Location describes a physical location, e.g. an airport, a warehouse or a truck deck
     * 
     */
    public final static String s_c_Location = "https://onerecord.iata.org/ns/cargo#Location";
    public final static IRI c_Location = IRI.create(s_c_Location);
    /**
     * Superclass: LogisticsAction is a specific task with a specific result performed on one or more physical LOs by one party in the context of an Activity
     * 
     */
    public final static String s_c_LogisticsAction = "https://onerecord.iata.org/ns/cargo#LogisticsAction";
    public final static IRI c_LogisticsAction = IRI.create(s_c_LogisticsAction);
    /**
     * Superclass: LogisticsActivity is a scheduled set of tasks that is executed as part of one or more Services
     * 
     */
    public final static String s_c_LogisticsActivity = "https://onerecord.iata.org/ns/cargo#LogisticsActivity";
    public final static IRI c_LogisticsActivity = IRI.create(s_c_LogisticsActivity);
    /**
     * Superclass: LogisticsAgents describe acting entities in the logistics supply chain such as persons and organizations
     * 
     */
    public final static String s_c_LogisticsAgent = "https://onerecord.iata.org/ns/cargo#LogisticsAgent";
    public final static IRI c_LogisticsAgent = IRI.create(s_c_LogisticsAgent);
    /**
     * Event details
     * 
     */
    public final static String s_c_LogisticsEvent = "https://onerecord.iata.org/ns/cargo#LogisticsEvent";
    public final static IRI c_LogisticsEvent = IRI.create(s_c_LogisticsEvent);
    /**
     * Logistics Object parent class, containing all common properties for logistics objects.
     * 
     */
    public final static String s_c_LogisticsObject = "https://onerecord.iata.org/ns/cargo#LogisticsObject";
    public final static IRI c_LogisticsObject = IRI.create(s_c_LogisticsObject);
    /**
     * Superclass: LogisticsService is a sequence of Activities provided by one Party to another
     * 
     */
    public final static String s_c_LogisticsService = "https://onerecord.iata.org/ns/cargo#LogisticsService";
    public final static IRI c_LogisticsService = IRI.create(s_c_LogisticsService);
    /**
     * LoosePiece details
     * 
     */
    public final static String s_c_LoosePiece = "https://onerecord.iata.org/ns/cargo#LoosePiece";
    public final static IRI c_LoosePiece = IRI.create(s_c_LoosePiece);
    /**
     * Measurements details for Sensors, either generic or geolocation measurements are recorded
     * 
     */
    public final static String s_c_Measurement = "https://onerecord.iata.org/ns/cargo#Measurement";
    public final static IRI c_Measurement = IRI.create(s_c_Measurement);
    /**
     * Open code list for transport modes
     * 
     */
    public final static String s_c_ModeQualifier = "https://onerecord.iata.org/ns/cargo#ModeQualifier";
    public final static IRI c_ModeQualifier = IRI.create(s_c_ModeQualifier);
    /**
     * Times refering to Transport Movements, used to describe specfic times such as Actual Departure time, etc.
     * 
     */
    public final static String s_c_MovementTime = "https://onerecord.iata.org/ns/cargo#MovementTime";
    public final static IRI c_MovementTime = IRI.create(s_c_MovementTime);
    /**
     * Restricted code list for MovementTime subtypes
     * 
     */
    public final static String s_c_MovementTimeType = "https://onerecord.iata.org/ns/cargo#MovementTimeType";
    public final static IRI c_MovementTimeType = IRI.create(s_c_MovementTimeType);
    /**
     * Non-human actors are actors which are not a person, such as robots
     * 
     */
    public final static String s_c_NonHumanActor = "https://onerecord.iata.org/ns/cargo#NonHumanActor";
    public final static IRI c_NonHumanActor = IRI.create(s_c_NonHumanActor);
    /**
     * Superclass: Organizations represent a kind of Agent corresponding to social instititutions such as companies, societies, etc
     * 
     */
    public final static String s_c_Organization = "https://onerecord.iata.org/ns/cargo#Organization";
    public final static IRI c_Organization = IRI.create(s_c_Organization);
    /**
     * Other Charge details from AWB as per bullet point 19 - data element 23 from AWB
     * 
     */
    public final static String s_c_OtherCharge = "https://onerecord.iata.org/ns/cargo#OtherCharge";
    public final static IRI c_OtherCharge = IRI.create(s_c_OtherCharge);
    /**
     * Other identifiers
     * 
     */
    public final static String s_c_OtherIdentifier = "https://onerecord.iata.org/ns/cargo#OtherIdentifier";
    public final static IRI c_OtherIdentifier = IRI.create(s_c_OtherIdentifier);
    /**
     * Packaging details 
     * 
     */
    public final static String s_c_PackagingType = "https://onerecord.iata.org/ns/cargo#PackagingType";
    public final static IRI c_PackagingType = IRI.create(s_c_PackagingType);
    /**
     * Refers to a Company and its role in a specific context, e.g Company A as shipper. Cargo-XML Code List 1.15 can be used as a reference with the addition of "Notify Party"
     * 
     */
    public final static String s_c_Party = "https://onerecord.iata.org/ns/cargo#Party";
    public final static IRI c_Party = IRI.create(s_c_Party);
    /**
     * Person details
     * 
     */
    public final static String s_c_Person = "https://onerecord.iata.org/ns/cargo#Person";
    public final static IRI c_Person = IRI.create(s_c_Person);
    /**
     * Superclass: PhysicalLogisticObjects represent the digital twin of an object in the logistics suppy chain that physically exist
     * 
     */
    public final static String s_c_PhysicalLogisticsObject = "https://onerecord.iata.org/ns/cargo#PhysicalLogisticsObject";
    public final static IRI c_PhysicalLogisticsObject = IRI.create(s_c_PhysicalLogisticsObject);
    /**
     * Individual piece or virtual grouping of pieces
     * 
     */
    public final static String s_c_Piece = "https://onerecord.iata.org/ns/cargo#Piece";
    public final static IRI c_Piece = IRI.create(s_c_Piece);
    /**
     * Dangerous Goods subtype of Piece
     * 
     */
    public final static String s_c_PieceDg = "https://onerecord.iata.org/ns/cargo#PieceDg";
    public final static IRI c_PieceDg = IRI.create(s_c_PieceDg);
    /**
     * PieceGroup details
     * 
     */
    public final static String s_c_PieceGroup = "https://onerecord.iata.org/ns/cargo#PieceGroup";
    public final static IRI c_PieceGroup = IRI.create(s_c_PieceGroup);
    /**
     * LiveAnimals subclass of Piece
     * 
     */
    public final static String s_c_PieceLiveAnimals = "https://onerecord.iata.org/ns/cargo#PieceLiveAnimals";
    public final static IRI c_PieceLiveAnimals = IRI.create(s_c_PieceLiveAnimals);
    /**
     * Price associated to the offer/booking
     * 
     */
    public final static String s_c_Price = "https://onerecord.iata.org/ns/cargo#Price";
    public final static IRI c_Price = IRI.create(s_c_Price);
    /**
     * Product details
     * 
     */
    public final static String s_c_Product = "https://onerecord.iata.org/ns/cargo#Product";
    public final static IRI c_Product = IRI.create(s_c_Product);
    /**
     * Dangerous Goods subtype of Product
     * 
     */
    public final static String s_c_ProductDg = "https://onerecord.iata.org/ns/cargo#ProductDg";
    public final static IRI c_ProductDg = IRI.create(s_c_ProductDg);
    /**
     * PublicAuthorities are Organizations of the state on public interests, such as customs
     * 
     */
    public final static String s_c_PublicAuthority = "https://onerecord.iata.org/ns/cargo#PublicAuthority";
    public final static IRI c_PublicAuthority = IRI.create(s_c_PublicAuthority);
    /**
     * Question holds one question and a link to an Answer The Question is provided by the party in charge of the template used
     * 
     */
    public final static String s_c_Question = "https://onerecord.iata.org/ns/cargo#Question";
    public final static IRI c_Question = IRI.create(s_c_Question);
    /**
     * Ranges details
     * 
     */
    public final static String s_c_Ranges = "https://onerecord.iata.org/ns/cargo#Ranges";
    public final static IRI c_Ranges = IRI.create(s_c_Ranges);
    /**
     * Ratings details
     * 
     */
    public final static String s_c_Ratings = "https://onerecord.iata.org/ns/cargo#Ratings";
    public final static IRI c_Ratings = IRI.create(s_c_Ratings);
    /**
     * Regulated Entity
     * 
     */
    public final static String s_c_RegulatedEntity = "https://onerecord.iata.org/ns/cargo#RegulatedEntity";
    public final static IRI c_RegulatedEntity = IRI.create(s_c_RegulatedEntity);
    /**
     * Security declaration details
     * 
     */
    public final static String s_c_SecurityDeclaration = "https://onerecord.iata.org/ns/cargo#SecurityDeclaration";
    public final static IRI c_SecurityDeclaration = IRI.create(s_c_SecurityDeclaration);
    /**
     * Sensor details and measurements, linked to Connected Devices
     * 
     */
    public final static String s_c_Sensor = "https://onerecord.iata.org/ns/cargo#Sensor";
    public final static IRI c_Sensor = IRI.create(s_c_Sensor);
    /**
     * Open code list for sensor types
     * 
     */
    public final static String s_c_SensorType = "https://onerecord.iata.org/ns/cargo#SensorType";
    public final static IRI c_SensorType = IRI.create(s_c_SensorType);
    /**
     * Shipment details
     * 
     */
    public final static String s_c_Shipment = "https://onerecord.iata.org/ns/cargo#Shipment";
    public final static IRI c_Shipment = IRI.create(s_c_Shipment);
    /**
     * StationRemarks details
     * 
     */
    public final static String s_c_StationRemarks = "https://onerecord.iata.org/ns/cargo#StationRemarks";
    public final static IRI c_StationRemarks = IRI.create(s_c_StationRemarks);
    /**
     * Activity to describe storing processes
     * 
     */
    public final static String s_c_Storage = "https://onerecord.iata.org/ns/cargo#Storage";
    public final static IRI c_Storage = IRI.create(s_c_Storage);
    /**
     * Action to describe store-in or store-out
     * 
     */
    public final static String s_c_Storing = "https://onerecord.iata.org/ns/cargo#Storing";
    public final static IRI c_Storing = IRI.create(s_c_Storing);
    /**
     * Restricted code list for Storing subtypes
     * 
     */
    public final static String s_c_StoringType = "https://onerecord.iata.org/ns/cargo#StoringType";
    public final static IRI c_StoringType = IRI.create(s_c_StoringType);
    /**
     * TemperatureInstructions details
     * 
     */
    public final static String s_c_TemperatureInstructions = "https://onerecord.iata.org/ns/cargo#TemperatureInstructions";
    public final static IRI c_TemperatureInstructions = IRI.create(s_c_TemperatureInstructions);
    /**
     * TransportLegs details
     * 
     */
    public final static String s_c_TransportLegs = "https://onerecord.iata.org/ns/cargo#TransportLegs";
    public final static IRI c_TransportLegs = IRI.create(s_c_TransportLegs);
    /**
     * Transport means details
     * 
     */
    public final static String s_c_TransportMeans = "https://onerecord.iata.org/ns/cargo#TransportMeans";
    public final static IRI c_TransportMeans = IRI.create(s_c_TransportMeans);
    /**
     * Activity to describe transports, replaces the TransportSegment in v1.1 and above
     * 
     */
    public final static String s_c_TransportMovement = "https://onerecord.iata.org/ns/cargo#TransportMovement";
    public final static IRI c_TransportMovement = IRI.create(s_c_TransportMovement);
    /**
     * Unit Load Device details
     * 
     */
    public final static String s_c_ULD = "https://onerecord.iata.org/ns/cargo#ULD";
    public final static IRI c_ULD = IRI.create(s_c_ULD);
    /**
     * ULDBasicPiece details
     * 
     */
    public final static String s_c_ULDBasicPiece = "https://onerecord.iata.org/ns/cargo#ULDBasicPiece";
    public final static IRI c_ULDBasicPiece = IRI.create(s_c_ULDBasicPiece);
    /**
     * ULDSpecificPiece details
     * 
     */
    public final static String s_c_ULDSpecificPiece = "https://onerecord.iata.org/ns/cargo#ULDSpecificPiece";
    public final static IRI c_ULDSpecificPiece = IRI.create(s_c_ULDSpecificPiece);
    /**
     * Activity to describe composition and decomposition of LoadingUnits
     * 
     */
    public final static String s_c_UnitComposition = "https://onerecord.iata.org/ns/cargo#UnitComposition";
    public final static IRI c_UnitComposition = IRI.create(s_c_UnitComposition);
    /**
     * UnitsPreference details
     * 
     */
    public final static String s_c_UnitsPreference = "https://onerecord.iata.org/ns/cargo#UnitsPreference";
    public final static IRI c_UnitsPreference = IRI.create(s_c_UnitsPreference);
    /**
     * Unit of measurement details
     * 
     */
    public final static String s_c_Value = "https://onerecord.iata.org/ns/cargo#Value";
    public final static IRI c_Value = IRI.create(s_c_Value);
    /**
     * VolumePieceGroup details
     * 
     */
    public final static String s_c_VolumePieceGroup = "https://onerecord.iata.org/ns/cargo#VolumePieceGroup";
    public final static IRI c_VolumePieceGroup = IRI.create(s_c_VolumePieceGroup);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_c_VolumetricWeight = "https://onerecord.iata.org/ns/cargo#VolumetricWeight";
    public final static IRI c_VolumetricWeight = IRI.create(s_c_VolumetricWeight);
    /**
     * Waybill details
     * 
     */
    public final static String s_c_Waybill = "https://onerecord.iata.org/ns/cargo#Waybill";
    public final static IRI c_Waybill = IRI.create(s_c_Waybill);
    /**
     * Information from AWB Rate Description section as per bullet point 18 - data elements 22A - 22Z from AWB
     * 
     */
    public final static String s_c_WaybillLineItem = "https://onerecord.iata.org/ns/cargo#WaybillLineItem";
    public final static IRI c_WaybillLineItem = IRI.create(s_c_WaybillLineItem);
    /**
     * Restricted code list for Waybill types
     * 
     */
    public final static String s_c_WaybillType = "https://onerecord.iata.org/ns/cargo#WaybillType";
    public final static IRI c_WaybillType = IRI.create(s_c_WaybillType);
    public final static String s_c_AWBUseIndicator = "https://onerecord.iata.org/ns/coreCodeLists#AWBUseIndicator";
    public final static IRI c_AWBUseIndicator = IRI.create(s_c_AWBUseIndicator);
    public final static String s_c_AircraftPossibilityCode = "https://onerecord.iata.org/ns/coreCodeLists#AircraftPossibilityCode";
    public final static IRI c_AircraftPossibilityCode = IRI.create(s_c_AircraftPossibilityCode);
    public final static String s_c_BasicRateClassCode = "https://onerecord.iata.org/ns/coreCodeLists#BasicRateClassCode";
    public final static IRI c_BasicRateClassCode = IRI.create(s_c_BasicRateClassCode);
    public final static String s_c_ChargeCode = "https://onerecord.iata.org/ns/coreCodeLists#ChargeCode";
    public final static IRI c_ChargeCode = IRI.create(s_c_ChargeCode);
    public final static String s_c_ChargeIdentifier = "https://onerecord.iata.org/ns/coreCodeLists#ChargeIdentifier";
    public final static IRI c_ChargeIdentifier = IRI.create(s_c_ChargeIdentifier);
    public final static String s_c_CommodityCode = "https://onerecord.iata.org/ns/coreCodeLists#CommodityCode";
    public final static IRI c_CommodityCode = IRI.create(s_c_CommodityCode);
    public final static String s_c_CurrencyCode = "https://onerecord.iata.org/ns/coreCodeLists#CurrencyCode";
    public final static IRI c_CurrencyCode = IRI.create(s_c_CurrencyCode);
    public final static String s_c_DangerousGoodsCode = "https://onerecord.iata.org/ns/coreCodeLists#DangerousGoodsCode";
    public final static IRI c_DangerousGoodsCode = IRI.create(s_c_DangerousGoodsCode);
    public final static String s_c_DemurrageCode = "https://onerecord.iata.org/ns/coreCodeLists#DemurrageCode";
    public final static IRI c_DemurrageCode = IRI.create(s_c_DemurrageCode);
    public final static String s_c_DimensionsUnitCode = "https://onerecord.iata.org/ns/coreCodeLists#DimensionsUnitCode";
    public final static IRI c_DimensionsUnitCode = IRI.create(s_c_DimensionsUnitCode);
    public final static String s_c_EntitlementCode = "https://onerecord.iata.org/ns/coreCodeLists#EntitlementCode";
    public final static IRI c_EntitlementCode = IRI.create(s_c_EntitlementCode);
    public final static String s_c_ExplosiveCompatibilityGroupCode = "https://onerecord.iata.org/ns/coreCodeLists#ExplosiveCompatibilityGroupCode";
    public final static IRI c_ExplosiveCompatibilityGroupCode = IRI.create(s_c_ExplosiveCompatibilityGroupCode);
    public final static String s_c_GoodsTypeCode = "https://onerecord.iata.org/ns/coreCodeLists#GoodsTypeCode";
    public final static IRI c_GoodsTypeCode = IRI.create(s_c_GoodsTypeCode);
    public final static String s_c_GoodsTypeExtensionCode = "https://onerecord.iata.org/ns/coreCodeLists#GoodsTypeExtensionCode";
    public final static IRI c_GoodsTypeExtensionCode = IRI.create(s_c_GoodsTypeExtensionCode);
    public final static String s_c_MeasurementUnitCode = "https://onerecord.iata.org/ns/coreCodeLists#MeasurementUnitCode";
    public final static IRI c_MeasurementUnitCode = IRI.create(s_c_MeasurementUnitCode);
    public final static String s_c_ModeCode = "https://onerecord.iata.org/ns/coreCodeLists#ModeCode";
    public final static IRI c_ModeCode = IRI.create(s_c_ModeCode);
    public final static String s_c_MovementIndicator = "https://onerecord.iata.org/ns/coreCodeLists#MovementIndicator";
    public final static IRI c_MovementIndicator = IRI.create(s_c_MovementIndicator);
    public final static String s_c_OtherChargeCode = "https://onerecord.iata.org/ns/coreCodeLists#OtherChargeCode";
    public final static IRI c_OtherChargeCode = IRI.create(s_c_OtherChargeCode);
    public final static String s_c_PackageMarkCode = "https://onerecord.iata.org/ns/coreCodeLists#PackageMarkCode";
    public final static IRI c_PackageMarkCode = IRI.create(s_c_PackageMarkCode);
    public final static String s_c_PackagingDangerLevelCode = "https://onerecord.iata.org/ns/coreCodeLists#PackagingDangerLevelCode";
    public final static IRI c_PackagingDangerLevelCode = IRI.create(s_c_PackagingDangerLevelCode);
    public final static String s_c_ParticipantIdentifier = "https://onerecord.iata.org/ns/coreCodeLists#ParticipantIdentifier";
    public final static IRI c_ParticipantIdentifier = IRI.create(s_c_ParticipantIdentifier);
    public final static String s_c_PrepaidCollectIndicator = "https://onerecord.iata.org/ns/coreCodeLists#PrepaidCollectIndicator";
    public final static IRI c_PrepaidCollectIndicator = IRI.create(s_c_PrepaidCollectIndicator);
    public final static String s_c_RaTypeCode = "https://onerecord.iata.org/ns/coreCodeLists#RaTypeCode";
    public final static IRI c_RaTypeCode = IRI.create(s_c_RaTypeCode);
    public final static String s_c_RadioactiveMaterialClassification = "https://onerecord.iata.org/ns/coreCodeLists#RadioactiveMaterialClassification";
    public final static IRI c_RadioactiveMaterialClassification = IRI.create(s_c_RadioactiveMaterialClassification);
    public final static String s_c_RateClassCode = "https://onerecord.iata.org/ns/coreCodeLists#RateClassCode";
    public final static IRI c_RateClassCode = IRI.create(s_c_RateClassCode);
    public final static String s_c_RatingsType = "https://onerecord.iata.org/ns/coreCodeLists#RatingsType";
    public final static IRI c_RatingsType = IRI.create(s_c_RatingsType);
    public final static String s_c_RegulatedEntityCategoryCode = "https://onerecord.iata.org/ns/coreCodeLists#RegulatedEntityCategoryCode";
    public final static IRI c_RegulatedEntityCategoryCode = IRI.create(s_c_RegulatedEntityCategoryCode);
    public final static String s_c_ScreeningExemption = "https://onerecord.iata.org/ns/coreCodeLists#ScreeningExemption";
    public final static IRI c_ScreeningExemption = IRI.create(s_c_ScreeningExemption);
    public final static String s_c_ScreeningMethod = "https://onerecord.iata.org/ns/coreCodeLists#ScreeningMethod";
    public final static IRI c_ScreeningMethod = IRI.create(s_c_ScreeningMethod);
    public final static String s_c_SecurityStatus = "https://onerecord.iata.org/ns/coreCodeLists#SecurityStatus";
    public final static IRI c_SecurityStatus = IRI.create(s_c_SecurityStatus);
    public final static String s_c_ServiceCode = "https://onerecord.iata.org/ns/coreCodeLists#ServiceCode";
    public final static IRI c_ServiceCode = IRI.create(s_c_ServiceCode);
    public final static String s_c_ShipmentSecurityStatus = "https://onerecord.iata.org/ns/coreCodeLists#ShipmentSecurityStatus";
    public final static IRI c_ShipmentSecurityStatus = IRI.create(s_c_ShipmentSecurityStatus);
    public final static String s_c_SignatoryRole = "https://onerecord.iata.org/ns/coreCodeLists#SignatoryRole";
    public final static IRI c_SignatoryRole = IRI.create(s_c_SignatoryRole);
    public final static String s_c_SignatureTypeCode = "https://onerecord.iata.org/ns/coreCodeLists#SignatureTypeCode";
    public final static IRI c_SignatureTypeCode = IRI.create(s_c_SignatureTypeCode);
    public final static String s_c_SpecialHandlingCode = "https://onerecord.iata.org/ns/coreCodeLists#SpecialHandlingCode";
    public final static IRI c_SpecialHandlingCode = IRI.create(s_c_SpecialHandlingCode);
    public final static String s_c_StatusCode = "https://onerecord.iata.org/ns/coreCodeLists#StatusCode";
    public final static IRI c_StatusCode = IRI.create(s_c_StatusCode);
    public final static String s_c_TemperatureUnitCode = "https://onerecord.iata.org/ns/coreCodeLists#TemperatureUnitCode";
    public final static IRI c_TemperatureUnitCode = IRI.create(s_c_TemperatureUnitCode);
    public final static String s_c_TransactionPurposeCode = "https://onerecord.iata.org/ns/coreCodeLists#TransactionPurposeCode";
    public final static IRI c_TransactionPurposeCode = IRI.create(s_c_TransactionPurposeCode);
    public final static String s_c_TransportMeansServiceType = "https://onerecord.iata.org/ns/coreCodeLists#TransportMeansServiceType";
    public final static IRI c_TransportMeansServiceType = IRI.create(s_c_TransportMeansServiceType);
    public final static String s_c_ULDChargeCode = "https://onerecord.iata.org/ns/coreCodeLists#ULDChargeCode";
    public final static IRI c_ULDChargeCode = IRI.create(s_c_ULDChargeCode);
    public final static String s_c_ULDConditionCode = "https://onerecord.iata.org/ns/coreCodeLists#ULDConditionCode";
    public final static IRI c_ULDConditionCode = IRI.create(s_c_ULDConditionCode);
    public final static String s_c_ULDLoadingIndicator = "https://onerecord.iata.org/ns/coreCodeLists#ULDLoadingIndicator";
    public final static IRI c_ULDLoadingIndicator = IRI.create(s_c_ULDLoadingIndicator);
    public final static String s_c_VolumeUnitCode = "https://onerecord.iata.org/ns/coreCodeLists#VolumeUnitCode";
    public final static IRI c_VolumeUnitCode = IRI.create(s_c_VolumeUnitCode);
    public final static String s_c_WeightUnitCode = "https://onerecord.iata.org/ns/coreCodeLists#WeightUnitCode";
    public final static IRI c_WeightUnitCode = IRI.create(s_c_WeightUnitCode);
    /**
     * Enum stating the type of the Action
     * 
     */
    public final static String s_p_actionTimeType = "https://onerecord.iata.org/ns/cargo#actionTimeType";
    public final static IRI p_actionTimeType = IRI.create(s_p_actionTimeType);
    /**
     * Reference to the Activity that is performed as part of a Service
     * 
     */
    public final static String s_p_activity = "https://onerecord.iata.org/ns/cargo#activity";
    public final static IRI p_activity = IRI.create(s_p_activity);
    /**
     * Information about the Activities that are part of the Service and their sequence
     * 
     */
    public final static String s_p_activitySequences = "https://onerecord.iata.org/ns/cargo#activitySequences";
    public final static IRI p_activitySequences = IRI.create(s_p_activitySequences);
    /**
     * Address details
     * 
     */
    public final static String s_p_address = "https://onerecord.iata.org/ns/cargo#address";
    public final static IRI p_address = IRI.create(s_p_address);
    /**
     * Address identifier using special coding systems e.g. US CBP FIRMS code
     * 
     */
    public final static String s_p_addressCode = "https://onerecord.iata.org/ns/cargo#addressCode";
    public final static IRI p_addressCode = IRI.create(s_p_addressCode);
    /**
     * Information about Adjustments performed on the BillingDetails
     * 
     */
    public final static String s_p_adjustments = "https://onerecord.iata.org/ns/cargo#adjustments";
    public final static IRI p_adjustments = IRI.create(s_p_adjustments);
    /**
     * Type of aircraft to be used if any specific requirements (e.g. Pure freighter, etc.)
     * 
     */
    public final static String s_p_aircraftPossibilityCode = "https://onerecord.iata.org/ns/cargo#aircraftPossibilityCode";
    public final static IRI p_aircraftPossibilityCode = IRI.create(s_p_aircraftPossibilityCode);
    /**
     * Reference to the Answer to the Question
     * 
     */
    public final static String s_p_answer = "https://onerecord.iata.org/ns/cargo#answer";
    public final static IRI p_answer = IRI.create(s_p_answer);
    /**
     * Reference to the Actor giving the Answer
     * 
     */
    public final static String s_p_answerActor = "https://onerecord.iata.org/ns/cargo#answerActor";
    public final static IRI p_answerActor = IRI.create(s_p_answerActor);
    /**
     * Information about an answer Value of any kind of the Answer
     * 
     */
    public final static String s_p_answerValue = "https://onerecord.iata.org/ns/cargo#answerValue";
    public final static IRI p_answerValue = IRI.create(s_p_answerValue);
    /**
     * Piece on which the Packaging type is applicable
     * 
     */
    public final static String s_p_appliedOnPieces = "https://onerecord.iata.org/ns/cargo#appliedOnPieces";
    public final static IRI p_appliedOnPieces = IRI.create(s_p_appliedOnPieces);
    /**
     * Reference to the arrival Location
     * 
     */
    public final static String s_p_arrivalLocation = "https://onerecord.iata.org/ns/cargo#arrivalLocation";
    public final static IRI p_arrivalLocation = IRI.create(s_p_arrivalLocation);
    /**
     * Reference to the permits associated with the Live Animals
     * 
     */
    public final static String s_p_associatedEpermit = "https://onerecord.iata.org/ns/cargo#associatedEpermit";
    public final static IRI p_associatedEpermit = IRI.create(s_p_associatedEpermit);
    /**
     * Reference to the Organization the Actor is associated with
     * 
     */
    public final static String s_p_associatedOrganization = "https://onerecord.iata.org/ns/cargo#associatedOrganization";
    public final static IRI p_associatedOrganization = IRI.create(s_p_associatedOrganization);
    /**
     * References to all connected IotDevices
     * 
     */
    public final static String s_p_attachedIotDevices = "https://onerecord.iata.org/ns/cargo#attachedIotDevices";
    public final static IRI p_attachedIotDevices = IRI.create(s_p_attachedIotDevices);
    /**
     * Reference to the PhysicalLogisticsObject the IotDevice is attached to
     * 
     */
    public final static String s_p_attachedToObject = "https://onerecord.iata.org/ns/cargo#attachedToObject";
    public final static IRI p_attachedToObject = IRI.create(s_p_attachedToObject);
    /**
     * It must either contain the values of R for Revenue AWB, V for Void AWB or S for Service AWB.
     * 
     */
    public final static String s_p_awbUseIndicator = "https://onerecord.iata.org/ns/cargo#awbUseIndicator";
    public final static IRI p_awbUseIndicator = IRI.create(s_p_awbUseIndicator);
    /**
     * Reference to the Location where the Organization is based at or headquartered
     * 
     */
    public final static String s_p_basedAtLocation = "https://onerecord.iata.org/ns/cargo#basedAtLocation";
    public final static IRI p_basedAtLocation = IRI.create(s_p_basedAtLocation);
    /**
     * Billing charge identifiers to be used for CASS. Refer to CargoXML Code List 1.33
     * 
     */
    public final static String s_p_billingChargeIdentifier = "https://onerecord.iata.org/ns/cargo#billingChargeIdentifier";
    public final static IRI p_billingChargeIdentifier = IRI.create(s_p_billingChargeIdentifier);
    /**
     * Reference to the BillingDetails of the Waybill
     * 
     */
    public final static String s_p_billingDetails = "https://onerecord.iata.org/ns/cargo#billingDetails";
    public final static IRI p_billingDetails = IRI.create(s_p_billingDetails);
    /**
     * Reference to the Booking
     * 
     */
    public final static String s_p_booking = "https://onerecord.iata.org/ns/cargo#booking";
    public final static IRI p_booking = IRI.create(s_p_booking);
    /**
     * Reference to all Booking Options
     * 
     */
    public final static String s_p_bookingOptions = "https://onerecord.iata.org/ns/cargo#bookingOptions";
    public final static IRI p_bookingOptions = IRI.create(s_p_bookingOptions);
    /**
     * Reference to the Booking preferences
     * 
     */
    public final static String s_p_bookingPreference = "https://onerecord.iata.org/ns/cargo#bookingPreference";
    public final static IRI p_bookingPreference = IRI.create(s_p_bookingPreference);
    /**
     * Reference to the Booking Request
     * 
     */
    public final static String s_p_bookingRequest = "https://onerecord.iata.org/ns/cargo#bookingRequest";
    public final static IRI p_bookingRequest = IRI.create(s_p_bookingRequest);
    /**
     * Reference to the BookingShipment if required
     * 
     */
    public final static String s_p_bookingShipmentDetails = "https://onerecord.iata.org/ns/cargo#bookingShipmentDetails";
    public final static IRI p_bookingShipmentDetails = IRI.create(s_p_bookingShipmentDetails);
    /**
     * Status of the Booking
     * 
     */
    public final static String s_p_bookingStatus = "https://onerecord.iata.org/ns/cargo#bookingStatus";
    public final static IRI p_bookingStatus = IRI.create(s_p_bookingStatus);
    /**
     * Information about the Booking Times of a privded Booking Option
     * 
     */
    public final static String s_p_bookingTimes = "https://onerecord.iata.org/ns/cargo#bookingTimes";
    public final static IRI p_bookingTimes = IRI.create(s_p_bookingTimes);
    /**
     * Reference to the Booking to update
     * 
     */
    public final static String s_p_bookingToUpdate = "https://onerecord.iata.org/ns/cargo#bookingToUpdate";
    public final static IRI p_bookingToUpdate = IRI.create(s_p_bookingToUpdate);
    /**
     * CO2 emissions calculated
     * 
     */
    public final static String s_p_calculatedEmissions = "https://onerecord.iata.org/ns/cargo#calculatedEmissions";
    public final static IRI p_calculatedEmissions = IRI.create(s_p_calculatedEmissions);
    /**
     * Reference to the TransportMovement or TransportLegs the CO2Emissions have been calculated for
     * 
     */
    public final static String s_p_calculationFor = "https://onerecord.iata.org/ns/cargo#calculationFor";
    public final static IRI p_calculationFor = IRI.create(s_p_calculationFor);
    /**
     * Reference to the operating carrier
     * 
     */
    public final static String s_p_carrier = "https://onerecord.iata.org/ns/cargo#carrier";
    public final static IRI p_carrier = IRI.create(s_p_carrier);
    /**
     * One letter charge code as per bullet point 12 - data element 13 from AWB
     * 
     */
    public final static String s_p_carrierChargeCode = "https://onerecord.iata.org/ns/cargo#carrierChargeCode";
    public final static IRI p_carrierChargeCode = IRI.create(s_p_carrierChargeCode);
    /**
     * Location of individual or company involved in the movement of a consignment or Coded representation of a specific airport/city code
     * 
     */
    public final static String s_p_carrierDeclarationPlace = "https://onerecord.iata.org/ns/cargo#carrierDeclarationPlace";
    public final static IRI p_carrierDeclarationPlace = IRI.create(s_p_carrierDeclarationPlace);
    /**
     * Reference to the Carrier product if known
     * 
     */
    public final static String s_p_carrierProduct = "https://onerecord.iata.org/ns/cargo#carrierProduct";
    public final static IRI p_carrierProduct = IRI.create(s_p_carrierProduct);
    /**
     * Reference to the Actor certifying the result of the Check if required
     * 
     */
    public final static String s_p_certifiedByActor = "https://onerecord.iata.org/ns/cargo#certifiedByActor";
    public final static IRI p_certifiedByActor = IRI.create(s_p_certifiedByActor);
    /**
     * Charge code, refer to CargoXML Code List 1.1
     * 
     */
    public final static String s_p_chargeCode = "https://onerecord.iata.org/ns/cargo#chargeCode";
    public final static IRI p_chargeCode = IRI.create(s_p_chargeCode);
    /**
     * Indicates if charge is prepaid or collect (P, C)
     * 
     */
    public final static String s_p_chargePaymentType = "https://onerecord.iata.org/ns/cargo#chargePaymentType";
    public final static IRI p_chargePaymentType = IRI.create(s_p_chargePaymentType);
    /**
     * Charge type related to amount total as per bullet points 2/21 - data elements 24A - 3B  from AWB
     * 
     */
    public final static String s_p_chargeType = "https://onerecord.iata.org/ns/cargo#chargeType";
    public final static IRI p_chargeType = IRI.create(s_p_chargeType);
    /**
     * Chargeable weight
     * 
     */
    public final static String s_p_chargeableWeight = "https://onerecord.iata.org/ns/cargo#chargeableWeight";
    public final static IRI p_chargeableWeight = IRI.create(s_p_chargeableWeight);
    /**
     * Chargeable weight for which the rate description details apply
     * 
     */
    public final static String s_p_chargeableWeightForRate = "https://onerecord.iata.org/ns/cargo#chargeableWeightForRate";
    public final static IRI p_chargeableWeightForRate = IRI.create(s_p_chargeableWeightForRate);
    /**
     * References to CheckActions performed for the Activity
     * 
     */
    public final static String s_p_checkActions = "https://onerecord.iata.org/ns/cargo#checkActions";
    public final static IRI p_checkActions = IRI.create(s_p_checkActions);
    /**
     * Reference to the CheckTemplate the Question is from
     * 
     */
    public final static String s_p_checkTemplate = "https://onerecord.iata.org/ns/cargo#checkTemplate";
    public final static IRI p_checkTemplate = IRI.create(s_p_checkTemplate);
    /**
     * Reference to the result of the Check
     * 
     */
    public final static String s_p_checkTotalResult = "https://onerecord.iata.org/ns/cargo#checkTotalResult";
    public final static IRI p_checkTotalResult = IRI.create(s_p_checkTotalResult);
    /**
     * Reference to the checked Object
     * 
     */
    public final static String s_p_checkedObject = "https://onerecord.iata.org/ns/cargo#checkedObject";
    public final static IRI p_checkedObject = IRI.create(s_p_checkedObject);
    /**
     * Reference to the Actor performing the Check
     * 
     */
    public final static String s_p_checker = "https://onerecord.iata.org/ns/cargo#checker";
    public final static IRI p_checker = IRI.create(s_p_checker);
    /**
     * References to the CheckActions performed on the object
     * 
     */
    public final static String s_p_checks = "https://onerecord.iata.org/ns/cargo#checks";
    public final static IRI p_checks = IRI.create(s_p_checks);
    /**
     * UN/LOCODE city code (5 letter) or IATA city code (3 letter)
     * 
     */
    public final static String s_p_cityCode = "https://onerecord.iata.org/ns/cargo#cityCode";
    public final static IRI p_cityCode = IRI.create(s_p_cityCode);
    /**
     * References to CO2Emissions
     * 
     */
    public final static String s_p_co2Emissions = "https://onerecord.iata.org/ns/cargo#co2Emissions";
    public final static IRI p_co2Emissions = IRI.create(s_p_co2Emissions);
    /**
     * References to the Materials being built-up or broken-down
     * 
     */
    public final static String s_p_composedMaterials = "https://onerecord.iata.org/ns/cargo#composedMaterials";
    public final static IRI p_composedMaterials = IRI.create(s_p_composedMaterials);
    /**
     * References to the Pieces being built-up or broken-down
     * 
     */
    public final static String s_p_composedPieces = "https://onerecord.iata.org/ns/cargo#composedPieces";
    public final static IRI p_composedPieces = IRI.create(s_p_composedPieces);
    /**
     * References to all CompositionActions performed for the UnitComposition
     * 
     */
    public final static String s_p_compositionActions = "https://onerecord.iata.org/ns/cargo#compositionActions";
    public final static IRI p_compositionActions = IRI.create(s_p_compositionActions);
    /**
     * Enum stating whether the CompositionAction describes build-up or break-down
     * 
     */
    public final static String s_p_compositionType = "https://onerecord.iata.org/ns/cargo#compositionType";
    public final static IRI p_compositionType = IRI.create(s_p_compositionType);
    /**
     * Reference to the sensors linked to the device
     * 
     */
    public final static String s_p_connectedSensors = "https://onerecord.iata.org/ns/cargo#connectedSensors";
    public final static IRI p_connectedSensors = IRI.create(s_p_connectedSensors);
    /**
     * Reference to the Organization that fulfills the role of the consignee, for a LiveAnimalsEpermit it has to include complete name and address (box 3)
     * 
     */
    public final static String s_p_consignee = "https://onerecord.iata.org/ns/cargo#consignee";
    public final static IRI p_consignee = IRI.create(s_p_consignee);
    /**
     * Reference to te pieces (Live Animals) of the permit
     * 
     */
    public final static String s_p_consignmentItems = "https://onerecord.iata.org/ns/cargo#consignmentItems";
    public final static IRI p_consignmentItems = IRI.create(s_p_consignmentItems);
    /**
     * Reference to the pieces and properties linked to the Permit (box 7 to 12)
     * 
     */
    public final static String s_p_consignments = "https://onerecord.iata.org/ns/cargo#consignments";
    public final static IRI p_consignments = IRI.create(s_p_consignments);
    /**
     * Type of the contact details, e.g. Phone number, Mail address
     * 
     */
    public final static String s_p_contactDetailType = "https://onerecord.iata.org/ns/cargo#contactDetailType";
    public final static IRI p_contactDetailType = IRI.create(s_p_contactDetailType);
    /**
     * Information about contactDetails
     * 
     */
    public final static String s_p_contactDetails = "https://onerecord.iata.org/ns/cargo#contactDetails";
    public final static IRI p_contactDetails = IRI.create(s_p_contactDetails);
    /**
     * References to Actors (Person, NonHumanActor) acting as contacts
     * 
     */
    public final static String s_p_contactPersons = "https://onerecord.iata.org/ns/cargo#contactPersons";
    public final static IRI p_contactPersons = IRI.create(s_p_contactPersons);
    /**
     * Contact type - e.g. Emergency contact, Customs contact, Customer contact
     * 
     */
    public final static String s_p_contactRole = "https://onerecord.iata.org/ns/cargo#contactRole";
    public final static IRI p_contactRole = IRI.create(s_p_contactRole);
    /**
     * Reference to the item(s) contained in the piece
     * 
     */
    public final static String s_p_containedItems = "https://onerecord.iata.org/ns/cargo#containedItems";
    public final static IRI p_containedItems = IRI.create(s_p_containedItems);
    /**
     * Details of contained piece(s)
     * 
     */
    public final static String s_p_containedPieces = "https://onerecord.iata.org/ns/cargo#containedPieces";
    public final static IRI p_containedPieces = IRI.create(s_p_containedPieces);
    /**
     * Customs, Security and Regulatory Control Information Identifier. Coded indicator qualifying Customs related information: Item Number "I", Exemption Legend "L", System Downtime Reference "S", Unique Consignment Reference Number "U", Movement Reference Number "M" .
     * Refers to Code List 1.1
     * Condition: At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_contentCode = "https://onerecord.iata.org/ns/cargo#contentCode";
    public final static IRI p_contentCode = IRI.create(s_p_contentCode);
    /**
     * Reference to the DgProductRadioactive this Isotope is contained in
     * 
     */
    public final static String s_p_contentOfDgProductRadioactive = "https://onerecord.iata.org/ns/cargo#contentOfDgProductRadioactive";
    public final static IRI p_contentOfDgProductRadioactive = IRI.create(s_p_contentOfDgProductRadioactive);
    /**
     * Goods production country, mandatory when there are no Items. Refer ISO 3166-2
     * 
     */
    public final static String s_p_contentProductionCountry = "https://onerecord.iata.org/ns/cargo#contentProductionCountry";
    public final static IRI p_contentProductionCountry = IRI.create(s_p_contentProductionCountry);
    /**
     * Reference to the Products describing the content of the Piece, mandatory if no data on Item level is used
     * 
     */
    public final static String s_p_contentProducts = "https://onerecord.iata.org/ns/cargo#contentProducts";
    public final static IRI p_contentProducts = IRI.create(s_p_contentProducts);
    /**
     * Country details. Refer ISO 3166-2
     * 
     */
    public final static String s_p_country = "https://onerecord.iata.org/ns/cargo#country";
    public final static IRI p_country = IRI.create(s_p_country);
    /**
     * Party covering the insurance 
     * 
     */
    public final static String s_p_coveringOrganization = "https://onerecord.iata.org/ns/cargo#coveringOrganization";
    public final static IRI p_coveringOrganization = IRI.create(s_p_coveringOrganization);
    /**
     * Location of the document, e.g. location where the document was emitted
     * 
     */
    public final static String s_p_createdAtLocation = "https://onerecord.iata.org/ns/cargo#createdAtLocation";
    public final static IRI p_createdAtLocation = IRI.create(s_p_createdAtLocation);
    /**
     * Preferred unit for currency
     * 
     */
    public final static String s_p_currency = "https://onerecord.iata.org/ns/cargo#currency";
    public final static IRI p_currency = IRI.create(s_p_currency);
    /**
     * Information about the currency used in a CurrencyValue. Create an instance of CurrencyCode based on ISO 4217
     * 
     */
    public final static String s_p_currencyUnit = "https://onerecord.iata.org/ns/cargo#currencyUnit";
    public final static IRI p_currencyUnit = IRI.create(s_p_currencyUnit);
    /**
     * Customs details
     * 
     */
    public final static String s_p_customsInformation = "https://onerecord.iata.org/ns/cargo#customsInformation";
    public final static IRI p_customsInformation = IRI.create(s_p_customsInformation);
    /**
     * Code indicating the origin of goods for Customs purposes (e.g. For goods in free circulation in the EU)
     * List to be provided by local authorities
     * 
     */
    public final static String s_p_customsOriginCode = "https://onerecord.iata.org/ns/cargo#customsOriginCode";
    public final static IRI p_customsOriginCode = IRI.create(s_p_customsOriginCode);
    /**
     * The value of a shipment declared for carriage purposes
     * 
     */
    public final static String s_p_declaredValueForCarriage = "https://onerecord.iata.org/ns/cargo#declaredValueForCarriage";
    public final static IRI p_declaredValueForCarriage = IRI.create(s_p_declaredValueForCarriage);
    /**
     * The value of a shipment declared for customs purposes
     * 
     */
    public final static String s_p_declaredValueForCustoms = "https://onerecord.iata.org/ns/cargo#declaredValueForCustoms";
    public final static IRI p_declaredValueForCustoms = IRI.create(s_p_declaredValueForCustoms);
    /**
     * Contains three designator of demurrage code, refer to RP 1654 (BCC, HHH, XXX, ZZZ)
     * 
     */
    public final static String s_p_demurrageCode = "https://onerecord.iata.org/ns/cargo#demurrageCode";
    public final static IRI p_demurrageCode = IRI.create(s_p_demurrageCode);
    /**
     * Reference to the depature Location
     * 
     */
    public final static String s_p_departureLocation = "https://onerecord.iata.org/ns/cargo#departureLocation";
    public final static IRI p_departureLocation = IRI.create(s_p_departureLocation);
    /**
     * Reference to the Items or Pieces in which the product can be found.
     * 
     */
    public final static String s_p_describedObjects = "https://onerecord.iata.org/ns/cargo#describedObjects";
    public final static IRI p_describedObjects = IRI.create(s_p_describedObjects);
    /**
     * Charges levied at destination accruing to the last carrier, in destination currency
     * 
     */
    public final static String s_p_destinationCharges = "https://onerecord.iata.org/ns/cargo#destinationCharges";
    public final static IRI p_destinationCharges = IRI.create(s_p_destinationCharges);
    /**
     * Reference to the Waybill
     * 
     */
    public final static String s_p_detailedWaybill = "https://onerecord.iata.org/ns/cargo#detailedWaybill";
    public final static IRI p_detailedWaybill = IRI.create(s_p_detailedWaybill);
    /**
     * Reference to the Dangerous Goods declaration
     * 
     */
    public final static String s_p_dgDeclaration = "https://onerecord.iata.org/ns/cargo#dgDeclaration";
    public final static IRI p_dgDeclaration = IRI.create(s_p_dgDeclaration);
    /**
     * The category of the package or all packed in one. Complete text to be transmitted: I-White, II-Yellow, III-Yellow instead of I, II, III
     * 
     */
    public final static String s_p_dgRaTypeCode = "https://onerecord.iata.org/ns/cargo#dgRaTypeCode";
    public final static IRI p_dgRaTypeCode = IRI.create(s_p_dgRaTypeCode);
    /**
     * Dg Radioactive Material
     * 
     */
    public final static String s_p_dgRadioactiveMaterial = "https://onerecord.iata.org/ns/cargo#dgRadioactiveMaterial";
    public final static IRI p_dgRadioactiveMaterial = IRI.create(s_p_dgRadioactiveMaterial);
    /**
     * Dimensions details
     * 
     */
    public final static String s_p_dimensions = "https://onerecord.iata.org/ns/cargo#dimensions";
    public final static IRI p_dimensions = IRI.create(s_p_dimensions);
    /**
     * Information about the Dimensions used for the rate descbribed by the Line Item
     * 
     */
    public final static String s_p_dimensionsForRate = "https://onerecord.iata.org/ns/cargo#dimensionsForRate";
    public final static IRI p_dimensionsForRate = IRI.create(s_p_dimensionsForRate);
    /**
     * Preferred unit for measurement and dimensions
     * 
     */
    public final static String s_p_dimensionsUnit = "https://onerecord.iata.org/ns/cargo#dimensionsUnit";
    public final static IRI p_dimensionsUnit = IRI.create(s_p_dimensionsUnit);
    /**
     * Direction to indicate if it's Inbound or Outbound
     * 
     */
    public final static String s_p_direction = "https://onerecord.iata.org/ns/cargo#direction";
    public final static IRI p_direction = IRI.create(s_p_direction);
    /**
     * Information about the calculated distance
     * 
     */
    public final static String s_p_distanceCalculated = "https://onerecord.iata.org/ns/cargo#distanceCalculated";
    public final static IRI p_distanceCalculated = IRI.create(s_p_distanceCalculated);
    /**
     * Information about the measured distance
     * 
     */
    public final static String s_p_distanceMeasured = "https://onerecord.iata.org/ns/cargo#distanceMeasured";
    public final static IRI p_distanceMeasured = IRI.create(s_p_distanceMeasured);
    /**
     * Linked documents to the person, e.g. driver's license, ID, etc.
     * 
     */
    public final static String s_p_documents = "https://onerecord.iata.org/ns/cargo#documents";
    public final static IRI p_documents = IRI.create(s_p_documents);
    /**
     * Weight of dry ice
     * 
     */
    public final static String s_p_dryIceWeight = "https://onerecord.iata.org/ns/cargo#dryIceWeight";
    public final static IRI p_dryIceWeight = IRI.create(s_p_dryIceWeight);
    /**
     * Elevation from sea level - Change of data type to Value as of ontology v1.1
     * 
     */
    public final static String s_p_elevation = "https://onerecord.iata.org/ns/cargo#elevation";
    public final static IRI p_elevation = IRI.create(s_p_elevation);
    /**
     * Contains the Emergency contact name (e.g. the name of the agency) and phone number (min required)
     * 
     */
    public final static String s_p_emergencyContact = "https://onerecord.iata.org/ns/cargo#emergencyContact";
    public final static IRI p_emergencyContact = IRI.create(s_p_emergencyContact);
    /**
     * Entitlement code to define if charges are Due carrier (C) or Due agent (A). Refer to CXML Code List 1.3
     * 
     */
    public final static String s_p_entitlement = "https://onerecord.iata.org/ns/cargo#entitlement";
    public final static IRI p_entitlement = IRI.create(s_p_entitlement);
    /**
     * Reference to the Epermit of the consignment
     * 
     */
    public final static String s_p_epermit = "https://onerecord.iata.org/ns/cargo#epermit";
    public final static IRI p_epermit = IRI.create(s_p_epermit);
    /**
     * Movement or milestone code. Can hold a named individual of the StatusCode core code list (corresponding to cXML code list 1.18), but can also be referring to different code lists.
     * 
     */
    public final static String s_p_eventCode = "https://onerecord.iata.org/ns/cargo#eventCode";
    public final static IRI p_eventCode = IRI.create(s_p_eventCode);
    /**
     * Refers to the URI of the linked object(s)
     * 
     */
    public final static String s_p_eventFor = "https://onerecord.iata.org/ns/cargo#eventFor";
    public final static IRI p_eventFor = IRI.create(s_p_eventFor);
    /**
     * Location of event
     * 
     */
    public final static String s_p_eventLocation = "https://onerecord.iata.org/ns/cargo#eventLocation";
    public final static IRI p_eventLocation = IRI.create(s_p_eventLocation);
    /**
     * Indicates type of event e.g.  Scheduled, Estimated, Actual
     * 
     */
    public final static String s_p_eventTimeType = "https://onerecord.iata.org/ns/cargo#eventTimeType";
    public final static IRI p_eventTimeType = IRI.create(s_p_eventTimeType);
    /**
     * Events object
     * 
     */
    public final static String s_p_events = "https://onerecord.iata.org/ns/cargo#events";
    public final static IRI p_events = IRI.create(s_p_events);
    /**
     * Quatity measured by the examining authority (box 14)
     * 
     */
    public final static String s_p_examiningQuantity = "https://onerecord.iata.org/ns/cargo#examiningQuantity";
    public final static IRI p_examiningQuantity = IRI.create(s_p_examiningQuantity);
    /**
     * Locations of excluded Via Points
     * 
     */
    public final static String s_p_excludedViaPoints = "https://onerecord.iata.org/ns/cargo#excludedViaPoints";
    public final static IRI p_excludedViaPoints = IRI.create(s_p_excludedViaPoints);
    /**
     * Enum stating the status of the Activity
     * 
     */
    public final static String s_p_executionStatus = "https://onerecord.iata.org/ns/cargo#executionStatus";
    public final static IRI p_executionStatus = IRI.create(s_p_executionStatus);
    /**
     * Expected commodity of the shipment as per Commodity Code list. Either this or expected HS code required
     * 
     */
    public final static String s_p_expectedCommodity = "https://onerecord.iata.org/ns/cargo#expectedCommodity";
    public final static IRI p_expectedCommodity = IRI.create(s_p_expectedCommodity);
    /**
     * Expected commodity of the shipment as per HS code (at least 6 digits). Either this or expectedCommodityCode required
     * 
     */
    public final static String s_p_expectedHScode = "https://onerecord.iata.org/ns/cargo#expectedHScode";
    public final static IRI p_expectedHScode = IRI.create(s_p_expectedHScode);
    /**
     * Specifies the reference to the group which identifies the kind of substances and articles that are deemed to be compatible. Mandatory field in case of transport of explosive articles or substances
     * 
     */
    public final static String s_p_explosiveCompatibilityGroupCode = "https://onerecord.iata.org/ns/cargo#explosiveCompatibilityGroupCode";
    public final static IRI p_explosiveCompatibilityGroupCode = IRI.create(s_p_explosiveCompatibilityGroupCode);
    /**
     * Country of last re-export (box 12a). Refer ISO 3166-2
     * 
     */
    public final static String s_p_exportTradeCountry = "https://onerecord.iata.org/ns/cargo#exportTradeCountry";
    public final static IRI p_exportTradeCountry = IRI.create(s_p_exportTradeCountry);
    /**
     * References to all associated ExternalReferences
     * 
     */
    public final static String s_p_externalReferences = "https://onerecord.iata.org/ns/cargo#externalReferences";
    public final static IRI p_externalReferences = IRI.create(s_p_externalReferences);
    /**
     * Reference to the BookingOption the LogisticsObject is detailling
     * 
     */
    public final static String s_p_forBookingOption = "https://onerecord.iata.org/ns/cargo#forBookingOption";
    public final static IRI p_forBookingOption = IRI.create(s_p_forBookingOption);
    /**
     * Reference to the BookingOptionRequest the information of the LogisticsObject is detailling
     * 
     */
    public final static String s_p_forBookingOptionRequest = "https://onerecord.iata.org/ns/cargo#forBookingOptionRequest";
    public final static IRI p_forBookingOptionRequest = IRI.create(s_p_forBookingOptionRequest);
    /**
     * Reference to the Booking Request the of the Booking Option
     * 
     */
    public final static String s_p_forBookingRequest = "https://onerecord.iata.org/ns/cargo#forBookingRequest";
    public final static IRI p_forBookingRequest = IRI.create(s_p_forBookingRequest);
    /**
     * Reference to the LiveAnimalsEpermit this Signature applies to
     * 
     */
    public final static String s_p_forEpermit = "https://onerecord.iata.org/ns/cargo#forEpermit";
    public final static IRI p_forEpermit = IRI.create(s_p_forEpermit);
    /**
     * Reference to the Prices based on this Ratings
     * 
     */
    public final static String s_p_forPrices = "https://onerecord.iata.org/ns/cargo#forPrices";
    public final static IRI p_forPrices = IRI.create(s_p_forPrices);
    /**
     * Reference to the ProductDg this DgProductRadiosctive details
     * 
     */
    public final static String s_p_forProductDg = "https://onerecord.iata.org/ns/cargo#forProductDg";
    public final static IRI p_forProductDg = IRI.create(s_p_forProductDg);
    /**
     * Information about the calculated fuel amount
     * 
     */
    public final static String s_p_fuelAmountCalculated = "https://onerecord.iata.org/ns/cargo#fuelAmountCalculated";
    public final static IRI p_fuelAmountCalculated = IRI.create(s_p_fuelAmountCalculated);
    /**
     * Information about the measured fuel amount
     * 
     */
    public final static String s_p_fuelAmountMeasured = "https://onerecord.iata.org/ns/cargo#fuelAmountMeasured";
    public final static IRI p_fuelAmountMeasured = IRI.create(s_p_fuelAmountMeasured);
    /**
     * Text holding an ULD Type Code if the Piece fulfills it before UnitComposition
     * 
     */
    public final static String s_p_fulfillsUldTypeCode = "https://onerecord.iata.org/ns/cargo#fulfillsUldTypeCode";
    public final static IRI p_fulfillsUldTypeCode = IRI.create(s_p_fulfillsUldTypeCode);
    /**
     * Geolocation details
     * 
     */
    public final static String s_p_geolocation = "https://onerecord.iata.org/ns/cargo#geolocation";
    public final static IRI p_geolocation = IRI.create(s_p_geolocation);
    /**
     * Reference to the Location from which the Question was answered, relevant for split checks with documentary and physical elements
     * 
     */
    public final static String s_p_givenAtLocation = "https://onerecord.iata.org/ns/cargo#givenAtLocation";
    public final static IRI p_givenAtLocation = IRI.create(s_p_givenAtLocation);
    /**
     * Appendix number of the convention (I, II or III) (box 1)
     * 
     */
    public final static String s_p_goodsTypeCode = "https://onerecord.iata.org/ns/cargo#goodsTypeCode";
    public final static IRI p_goodsTypeCode = IRI.create(s_p_goodsTypeCode);
    /**
     * Appendix number of the convention (I, II or III) (box 1)
     * 
     */
    public final static String s_p_goodsTypeExtensionCode = "https://onerecord.iata.org/ns/cargo#goodsTypeExtensionCode";
    public final static IRI p_goodsTypeExtensionCode = IRI.create(s_p_goodsTypeExtensionCode);
    /**
     * Weight details
     * 
     */
    public final static String s_p_grossWeight = "https://onerecord.iata.org/ns/cargo#grossWeight";
    public final static IRI p_grossWeight = IRI.create(s_p_grossWeight);
    /**
     * Gross weight for which the rate description details apply
     * 
     */
    public final static String s_p_grossWeightForRate = "https://onerecord.iata.org/ns/cargo#grossWeightForRate";
    public final static IRI p_grossWeightForRate = IRI.create(s_p_grossWeightForRate);
    /**
     * Exemption code - e.g. BIOM- Bio-Medical Samples
     * SMUS - small undersized shipments MAIL - mail
     * BIOM - bio-medical samples
     * DIPL - diplomatic bags or diplomatic mail
     * LFSM - life-saving materials NUCL - nuclear materials
     * TRNS - transfer or transshipment
     * 
     */
    public final static String s_p_groundsForExemption = "https://onerecord.iata.org/ns/cargo#groundsForExemption";
    public final static IRI p_groundsForExemption = IRI.create(s_p_groundsForExemption);
    /**
     * Height
     * 
     */
    public final static String s_p_height = "https://onerecord.iata.org/ns/cargo#height";
    public final static IRI p_height = IRI.create(s_p_height);
    /**
     * Refers to the Waybill(s) contained
     * 
     */
    public final static String s_p_houseWaybills = "https://onerecord.iata.org/ns/cargo#houseWaybills";
    public final static IRI p_houseWaybills = IRI.create(s_p_houseWaybills);
    /**
     * Harmonized Commodity code, refer to hsType used. 6 minimum digits are expected.
     * 
     */
    public final static String s_p_hsCode = "https://onerecord.iata.org/ns/cargo#hsCode";
    public final static IRI p_hsCode = IRI.create(s_p_hsCode);
    /**
     * Harmonized Commodity code, refer to hsType used. 6 minimum digits are expected.
     * 
     */
    public final static String s_p_hsCodeForRate = "https://onerecord.iata.org/ns/cargo#hsCodeForRate";
    public final static IRI p_hsCodeForRate = IRI.create(s_p_hsCodeForRate);
    /**
     * Reference to the Piece this Item or Piece is contained in
     * 
     */
    public final static String s_p_inPiece = "https://onerecord.iata.org/ns/cargo#inPiece";
    public final static IRI p_inPiece = IRI.create(s_p_inPiece);
    public final static String s_p_inUnitComposition = "https://onerecord.iata.org/ns/cargo#inUnitComposition";
    public final static IRI p_inUnitComposition = IRI.create(s_p_inUnitComposition);
    /**
     * Locations or stations to included in the routing
     * 
     */
    public final static String s_p_includedViaPoints = "https://onerecord.iata.org/ns/cargo#includedViaPoints";
    public final static IRI p_includedViaPoints = IRI.create(s_p_includedViaPoints);
    /**
     * Standard codes as defined by UNCEFACT and ICC that correspond to international rules for the interpretation of the most commonly used trade terms in different countries. UNECE recommendation n. 5 Incoterms 2.
     * 
     */
    public final static String s_p_incoterms = "https://onerecord.iata.org/ns/cargo#incoterms";
    public final static IRI p_incoterms = IRI.create(s_p_incoterms);
    /**
     * Insurance details
     * 
     */
    public final static String s_p_insurance = "https://onerecord.iata.org/ns/cargo#insurance";
    public final static IRI p_insurance = IRI.create(s_p_insurance);
    /**
     * Insured amount - amount covered by the insurance policy
     * 
     */
    public final static String s_p_insuredAmount = "https://onerecord.iata.org/ns/cargo#insuredAmount";
    public final static IRI p_insuredAmount = IRI.create(s_p_insuredAmount);
    /**
     * Reference to the shipments insured
     * 
     */
    public final static String s_p_insuredShipments = "https://onerecord.iata.org/ns/cargo#insuredShipments";
    public final static IRI p_insuredShipments = IRI.create(s_p_insuredShipments);
    /**
     * References to the Actions the object is involved in
     * 
     */
    public final static String s_p_involvedInActions = "https://onerecord.iata.org/ns/cargo#involvedInActions";
    public final static IRI p_involvedInActions = IRI.create(s_p_involvedInActions);
    /**
     * Information about other Parties involved depending on the context of use
     * 
     */
    public final static String s_p_involvedParties = "https://onerecord.iata.org/ns/cargo#involvedParties";
    public final static IRI p_involvedParties = IRI.create(s_p_involvedParties);
    /**
     * DgRadioactiveIsotope.
     * 
     */
    public final static String s_p_isotopes = "https://onerecord.iata.org/ns/cargo#isotopes";
    public final static IRI p_isotopes = IRI.create(s_p_isotopes);
    /**
     * Name of person (or employee ID) who issued the security status
     * 
     */
    public final static String s_p_issuedBy = "https://onerecord.iata.org/ns/cargo#issuedBy";
    public final static IRI p_issuedBy = IRI.create(s_p_issuedBy);
    /**
     * Reference to the Piece the document was issued for
     * 
     */
    public final static String s_p_issuedForPiece = "https://onerecord.iata.org/ns/cargo#issuedForPiece";
    public final static IRI p_issuedForPiece = IRI.create(s_p_issuedForPiece);
    /**
     * Reference to the shipment the document was issued for
     * 
     */
    public final static String s_p_issuedForShipment = "https://onerecord.iata.org/ns/cargo#issuedForShipment";
    public final static IRI p_issuedForShipment = IRI.create(s_p_issuedForShipment);
    /**
     * Reference to the Waybill object
     * 
     */
    public final static String s_p_issuedForWaybill = "https://onerecord.iata.org/ns/cargo#issuedForWaybill";
    public final static IRI p_issuedForWaybill = IRI.create(s_p_issuedForWaybill);
    /**
     * Quantity of the item when applicable, with associated units of measure
     * 
     */
    public final static String s_p_itemQuantity = "https://onerecord.iata.org/ns/cargo#itemQuantity";
    public final static IRI p_itemQuantity = IRI.create(s_p_itemQuantity);
    /**
     * Reference to an ExternalReference holding a legacy templats outside of ONE Record, such as a photo or pdf of a checksheet
     * 
     */
    public final static String s_p_legacyTemplate = "https://onerecord.iata.org/ns/cargo#legacyTemplate";
    public final static IRI p_legacyTemplate = IRI.create(s_p_legacyTemplate);
    /**
     * Length
     * 
     */
    public final static String s_p_length = "https://onerecord.iata.org/ns/cargo#length";
    public final static IRI p_length = IRI.create(s_p_length);
    /**
     * Load type of the shipment or piece (Bulk, ULD, Pallet, Loose)
     * 
     */
    public final static String s_p_loadType = "https://onerecord.iata.org/ns/cargo#loadType";
    public final static IRI p_loadType = IRI.create(s_p_loadType);
    /**
     * References to Materials onloaded or offloaded
     * 
     */
    public final static String s_p_loadedMaterials = "https://onerecord.iata.org/ns/cargo#loadedMaterials";
    public final static IRI p_loadedMaterials = IRI.create(s_p_loadedMaterials);
    /**
     * References to Pieces onloaded or offloaded
     * 
     */
    public final static String s_p_loadedPieces = "https://onerecord.iata.org/ns/cargo#loadedPieces";
    public final static IRI p_loadedPieces = IRI.create(s_p_loadedPieces);
    /**
     * References to LoadingUnits onloaded or offloaded
     * 
     */
    public final static String s_p_loadedUnits = "https://onerecord.iata.org/ns/cargo#loadedUnits";
    public final static IRI p_loadedUnits = IRI.create(s_p_loadedUnits);
    /**
     * References to all actions of type Loading performed for the TransportMovement
     * 
     */
    public final static String s_p_loadingActions = "https://onerecord.iata.org/ns/cargo#loadingActions";
    public final static IRI p_loadingActions = IRI.create(s_p_loadingActions);
    /**
     * ULD height or loading limitation code. Refer CXML Code List 1.47,  e.g. R - ULD Height above 244 centimetres
     * 
     */
    public final static String s_p_loadingIndicator = "https://onerecord.iata.org/ns/cargo#loadingIndicator";
    public final static IRI p_loadingIndicator = IRI.create(s_p_loadingIndicator);
    /**
     * Enum stating whether the LoadingAction describes onloading or offloading
     * 
     */
    public final static String s_p_loadingType = "https://onerecord.iata.org/ns/cargo#loadingType";
    public final static IRI p_loadingType = IRI.create(s_p_loadingType);
    /**
     * Reference to the LoadingUnit composed in the Unit Composition or referenced in Composing actions
     * 
     */
    public final static String s_p_loadingUnit = "https://onerecord.iata.org/ns/cargo#loadingUnit";
    public final static IRI p_loadingUnit = IRI.create(s_p_loadingUnit);
    /**
     * Location code of airport, freight terminal, seaport, rail station. UN/LOCODE city code (5 letter) or IATA airport code (3 letter)
     * 
     */
    public final static String s_p_locationCodes = "https://onerecord.iata.org/ns/cargo#locationCodes";
    public final static IRI p_locationCodes = IRI.create(s_p_locationCodes);
    /**
     * Manufacturing company details and contacts
     * 
     */
    public final static String s_p_manufacturer = "https://onerecord.iata.org/ns/cargo#manufacturer";
    public final static IRI p_manufacturer = IRI.create(s_p_manufacturer);
    /**
     * Reference to the master Waybill if it is contained in one
     * 
     */
    public final static String s_p_masterWaybill = "https://onerecord.iata.org/ns/cargo#masterWaybill";
    public final static IRI p_masterWaybill = IRI.create(s_p_masterWaybill);
    /**
     * Maximum temperature of the range
     * 
     */
    public final static String s_p_maxTemperature = "https://onerecord.iata.org/ns/cargo#maxTemperature";
    public final static IRI p_maxTemperature = IRI.create(s_p_maxTemperature);
    /**
     * Information about all non-Geolocation values of the measurement
     * 
     */
    public final static String s_p_measurementValue = "https://onerecord.iata.org/ns/cargo#measurementValue";
    public final static IRI p_measurementValue = IRI.create(s_p_measurementValue);
    /**
     * Reference to the Measurements recorded by the Sensor
     * 
     */
    public final static String s_p_measurements = "https://onerecord.iata.org/ns/cargo#measurements";
    public final static IRI p_measurements = IRI.create(s_p_measurements);
    /**
     * Minimum temperature of the range
     * 
     */
    public final static String s_p_minTemperature = "https://onerecord.iata.org/ns/cargo#minTemperature";
    public final static IRI p_minTemperature = IRI.create(s_p_minTemperature);
    /**
     * Mode of transport code, refer to UNECE Rec. 19 https://unece.org/fileadmin/DAM/cefact/recommendations/rec19/rec19_1cf19e.pdf
     * 
     */
    public final static String s_p_modeCode = "https://onerecord.iata.org/ns/cargo#modeCode";
    public final static IRI p_modeCode = IRI.create(s_p_modeCode);
    /**
     * Pre-Carriage, Main-Carriage or On-Carriage
     * 
     */
    public final static String s_p_modeQualifier = "https://onerecord.iata.org/ns/cargo#modeQualifier";
    public final static IRI p_modeQualifier = IRI.create(s_p_modeQualifier);
    /**
     * The milestone list still needs to be defined, it includes elements from CXML Code List 1.92 but is not limited to those values, e.g. block-on and block-off times might be added as a comparison to wheels off and touchdown.
     * 
     */
    public final static String s_p_movementMilestone = "https://onerecord.iata.org/ns/cargo#movementMilestone";
    public final static IRI p_movementMilestone = IRI.create(s_p_movementMilestone);
    /**
     * The type of time can be Actual, Estimated ot Scheduled
     * 
     */
    public final static String s_p_movementTimeType = "https://onerecord.iata.org/ns/cargo#movementTimeType";
    public final static IRI p_movementTimeType = IRI.create(s_p_movementTimeType);
    /**
     * Information about times related to the movement (milestone list to be defined)
     * 
     */
    public final static String s_p_movementTimes = "https://onerecord.iata.org/ns/cargo#movementTimes";
    public final static IRI p_movementTimes = IRI.create(s_p_movementTimes);
    /**
     * The total net weight of dangerous goods transported of this line item. For air transport the value must be the volume or mass in each package.
     * 
     */
    public final static String s_p_netWeightMeasure = "https://onerecord.iata.org/ns/cargo#netWeightMeasure";
    public final static IRI p_netWeightMeasure = IRI.create(s_p_netWeightMeasure);
    /**
     * Contains two designator codes of ODLN or Operational Damage Limit Notices. ODLN code is used to define type of damage after visually check the serviceability of ULDs section 7, Standard Specifications 4/3 or 4/4 in ULD Regulations
     * 
     */
    public final static String s_p_odlnCode = "https://onerecord.iata.org/ns/cargo#odlnCode";
    public final static IRI p_odlnCode = IRI.create(s_p_odlnCode);
    /**
     * Reference to the Product describing the Item
     * 
     */
    public final static String s_p_ofProduct = "https://onerecord.iata.org/ns/cargo#ofProduct";
    public final static IRI p_ofProduct = IRI.create(s_p_ofProduct);
    /**
     * Reference to the Shipment the Piece is assigned to
     * 
     */
    public final static String s_p_ofShipment = "https://onerecord.iata.org/ns/cargo#ofShipment";
    public final static IRI p_ofShipment = IRI.create(s_p_ofShipment);
    /**
     * Reference to the TransportMeans that is being onloaded or offloaded
     * 
     */
    public final static String s_p_onTransportMeans = "https://onerecord.iata.org/ns/cargo#onTransportMeans";
    public final static IRI p_onTransportMeans = IRI.create(s_p_onTransportMeans);
    /**
     * References to the Actions happening at the Location
     * 
     */
    public final static String s_p_onsiteActions = "https://onerecord.iata.org/ns/cargo#onsiteActions";
    public final static IRI p_onsiteActions = IRI.create(s_p_onsiteActions);
    /**
     * Transport Movement on which the Transport Means is used
     * 
     */
    public final static String s_p_operatedTransportMovement = "https://onerecord.iata.org/ns/cargo#operatedTransportMovement";
    public final static IRI p_operatedTransportMovement = IRI.create(s_p_operatedTransportMovement);
    /**
     * Reference to the TransportMeans operating the TransportMovement
     * 
     */
    public final static String s_p_operatingTransportMeans = "https://onerecord.iata.org/ns/cargo#operatingTransportMeans";
    public final static IRI p_operatingTransportMeans = IRI.create(s_p_operatingTransportMeans);
    /**
     * Document type code of origin reference permit or re-export reference Certificate (box 12/12a)
     * 
     */
    public final static String s_p_originReferencePermitTypeCode = "https://onerecord.iata.org/ns/cargo#originReferencePermitTypeCode";
    public final static IRI p_originReferencePermitTypeCode = IRI.create(s_p_originReferencePermitTypeCode);
    /**
     * country of origin (box 12). Refer ISO 3166-2
     * 
     */
    public final static String s_p_originTradeCountry = "https://onerecord.iata.org/ns/cargo#originTradeCountry";
    public final static IRI p_originTradeCountry = IRI.create(s_p_originTradeCountry);
    /**
     * Document originator details and contacts
     * 
     */
    public final static String s_p_originator = "https://onerecord.iata.org/ns/cargo#originator";
    public final static IRI p_originator = IRI.create(s_p_originator);
    /**
     * Charateristics of the product
     * 
     */
    public final static String s_p_otherCharacteristics = "https://onerecord.iata.org/ns/cargo#otherCharacteristics";
    public final static IRI p_otherCharacteristics = IRI.create(s_p_otherCharacteristics);
    /**
     * Other Charge amount
     * 
     */
    public final static String s_p_otherChargeAmount = "https://onerecord.iata.org/ns/cargo#otherChargeAmount";
    public final static IRI p_otherChargeAmount = IRI.create(s_p_otherChargeAmount);
    /**
     * Refer to CargoXML Code List 1.2 for Other Charges
     * 
     */
    public final static String s_p_otherChargeCode = "https://onerecord.iata.org/ns/cargo#otherChargeCode";
    public final static IRI p_otherChargeCode = IRI.create(s_p_otherChargeCode);
    /**
     * Information about Other Charges applying to this Waybill
     * 
     */
    public final static String s_p_otherCharges = "https://onerecord.iata.org/ns/cargo#otherCharges";
    public final static IRI p_otherCharges = IRI.create(s_p_otherCharges);
    /**
     * Indicator whether the payment of Other Charges is to be made at origin (prepaid) or at destination (collect) as per bullet point 13 - data element 15a/15b from AWB
     * 
     */
    public final static String s_p_otherChargesIndicator = "https://onerecord.iata.org/ns/cargo#otherChargesIndicator";
    public final static IRI p_otherChargesIndicator = IRI.create(s_p_otherChargesIndicator);
    /**
     * Details about any other identifier, depending on the context of use
     * 
     */
    public final static String s_p_otherIdentifiers = "https://onerecord.iata.org/ns/cargo#otherIdentifiers";
    public final static IRI p_otherIdentifiers = IRI.create(s_p_otherIdentifiers);
    /**
     * Any other regulated entity that accepts custody of the cargo and accepts the security status originally issued
     * 
     */
    public final static String s_p_otherRegulatedEntities = "https://onerecord.iata.org/ns/cargo#otherRegulatedEntities";
    public final static IRI p_otherRegulatedEntities = IRI.create(s_p_otherRegulatedEntities);
    /**
     * Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_overpackTypeCode = "https://onerecord.iata.org/ns/cargo#overpackTypeCode";
    public final static IRI p_overpackTypeCode = IRI.create(s_p_overpackTypeCode);
    /**
     * Owner code of the ULD in aa, an or na format - owner can be an airline or leasing company
     * 
     */
    public final static String s_p_ownerCode = "https://onerecord.iata.org/ns/cargo#ownerCode";
    public final static IRI p_ownerCode = IRI.create(s_p_ownerCode);
    /**
     * Reference to the Organization for which the RegulatedEntity information is valid
     * 
     */
    public final static String s_p_owningOrganization = "https://onerecord.iata.org/ns/cargo#owningOrganization";
    public final static IRI p_owningOrganization = IRI.create(s_p_owningOrganization);
    /**
     * Reference identifying how the package is marked. Field is hardcode to "SSCC-18", "UPC" or "Other"
     * 
     */
    public final static String s_p_packageMarkCoded = "https://onerecord.iata.org/ns/cargo#packageMarkCoded";
    public final static IRI p_packageMarkCoded = IRI.create(s_p_packageMarkCoded);
    /**
     * Packing group, If used must reference I, II or III
     * 
     */
    public final static String s_p_packagingDangerLevelCode = "https://onerecord.iata.org/ns/cargo#packagingDangerLevelCode";
    public final static IRI p_packagingDangerLevelCode = IRI.create(s_p_packagingDangerLevelCode);
    /**
     * Packaging details 
     * 
     */
    public final static String s_p_packagingType = "https://onerecord.iata.org/ns/cargo#packagingType";
    public final static IRI p_packagingType = IRI.create(s_p_packagingType);
    /**
     * Reference to the parent Organization
     * 
     */
    public final static String s_p_parentOrganization = "https://onerecord.iata.org/ns/cargo#parentOrganization";
    public final static IRI p_parentOrganization = IRI.create(s_p_parentOrganization);
    /**
     * Reference to the IoT Device to which the sensor is linked
     * 
     */
    public final static String s_p_partOfIotDevice = "https://onerecord.iata.org/ns/cargo#partOfIotDevice";
    public final static IRI p_partOfIotDevice = IRI.create(s_p_partOfIotDevice);
    /**
     * Reference to the Agent described by the role of the Party
     * 
     */
    public final static String s_p_partyDetails = "https://onerecord.iata.org/ns/cargo#partyDetails";
    public final static IRI p_partyDetails = IRI.create(s_p_partyDetails);
    /**
     * Role fo the Company in the context. Can refer to Code List 1.36 in the CXML Toolkit
     * 
     */
    public final static String s_p_partyRole = "https://onerecord.iata.org/ns/cargo#partyRole";
    public final static IRI p_partyRole = IRI.create(s_p_partyRole);
    /**
     * Reference to the Location the Action was performed at
     * 
     */
    public final static String s_p_performedAt = "https://onerecord.iata.org/ns/cargo#performedAt";
    public final static IRI p_performedAt = IRI.create(s_p_performedAt);
    /**
     * Code specifying the document name. (box 1)
     * 
     */
    public final static String s_p_permitTypeCode = "https://onerecord.iata.org/ns/cargo#permitTypeCode";
    public final static IRI p_permitTypeCode = IRI.create(s_p_permitTypeCode);
    /**
     * A description of the physical and chemical form of the material.
     * 
     */
    public final static String s_p_physicalChemicalForm = "https://onerecord.iata.org/ns/cargo#physicalChemicalForm";
    public final static IRI p_physicalChemicalForm = IRI.create(s_p_physicalChemicalForm);
    /**
     * Total gross weight of the piece group
     * 
     */
    public final static String s_p_pieceGroupGrossWeight = "https://onerecord.iata.org/ns/cargo#pieceGroupGrossWeight";
    public final static IRI p_pieceGroupGrossWeight = IRI.create(s_p_pieceGroupGrossWeight);
    /**
     * Reference to the Piece groups of the shipment
     * 
     */
    public final static String s_p_pieceGroups = "https://onerecord.iata.org/ns/cargo#pieceGroups";
    public final static IRI p_pieceGroups = IRI.create(s_p_pieceGroups);
    /**
     * Height of a single piece
     * 
     */
    public final static String s_p_pieceHeight = "https://onerecord.iata.org/ns/cargo#pieceHeight";
    public final static IRI p_pieceHeight = IRI.create(s_p_pieceHeight);
    /**
     * Length of a single piece
     * 
     */
    public final static String s_p_pieceLength = "https://onerecord.iata.org/ns/cargo#pieceLength";
    public final static IRI p_pieceLength = IRI.create(s_p_pieceLength);
    /**
     * Weight of a single piece
     * 
     */
    public final static String s_p_pieceWeight = "https://onerecord.iata.org/ns/cargo#pieceWeight";
    public final static IRI p_pieceWeight = IRI.create(s_p_pieceWeight);
    /**
     * Width of a single piece
     * 
     */
    public final static String s_p_pieceWidth = "https://onerecord.iata.org/ns/cargo#pieceWidth";
    public final static IRI p_pieceWidth = IRI.create(s_p_pieceWidth);
    /**
     * References to the Pieces that are part of this Shipment
     * 
     */
    public final static String s_p_pieces = "https://onerecord.iata.org/ns/cargo#pieces";
    public final static IRI p_pieces = IRI.create(s_p_pieces);
    /**
     * Postal / ZIP code
     * 
     */
    public final static String s_p_postalCode = "https://onerecord.iata.org/ns/cargo#postalCode";
    public final static IRI p_postalCode = IRI.create(s_p_postalCode);
    /**
     * Price of the Booking (if different from the offer)
     * 
     */
    public final static String s_p_price = "https://onerecord.iata.org/ns/cargo#price";
    public final static IRI p_price = IRI.create(s_p_price);
    /**
     * Carrier's product code
     * 
     */
    public final static String s_p_productCode = "https://onerecord.iata.org/ns/cargo#productCode";
    public final static IRI p_productCode = IRI.create(s_p_productCode);
    /**
     * Production country details. Refer ISO 3166-2
     * 
     */
    public final static String s_p_productionCountry = "https://onerecord.iata.org/ns/cargo#productionCountry";
    public final static IRI p_productionCountry = IRI.create(s_p_productionCountry);
    /**
     * Production country for the rate described by this Line Item. Refer ISO 3166-2
     * 
     */
    public final static String s_p_productionCountryForRate = "https://onerecord.iata.org/ns/cargo#productionCountryForRate";
    public final static IRI p_productionCountryForRate = IRI.create(s_p_productionCountryForRate);
    /**
     * Reference to the Question the Answer is for
     * 
     */
    public final static String s_p_question = "https://onerecord.iata.org/ns/cargo#question";
    public final static IRI p_question = IRI.create(s_p_question);
    /**
     * References to all Questions that are part of this template
     * 
     */
    public final static String s_p_questions = "https://onerecord.iata.org/ns/cargo#questions";
    public final static IRI p_questions = IRI.create(s_p_questions);
    /**
     * Reference to the ranges
     * 
     */
    public final static String s_p_ranges = "https://onerecord.iata.org/ns/cargo#ranges";
    public final static IRI p_ranges = IRI.create(s_p_ranges);
    /**
     * TACT Rate for rate description details
     * 
     */
    public final static String s_p_rateCharge = "https://onerecord.iata.org/ns/cargo#rateCharge";
    public final static IRI p_rateCharge = IRI.create(s_p_rateCharge);
    /**
     * Rate class code e.g. Q. Refer to CXML Code List 1.4 Rate Class Codes
     * 
     */
    public final static String s_p_rateClassCode = "https://onerecord.iata.org/ns/cargo#rateClassCode";
    public final static IRI p_rateClassCode = IRI.create(s_p_rateClassCode);
    /**
     * Rate Surcharge/Reduction - Basic Rate Class Code
     * 
     */
    public final static String s_p_rateClassCodeBasic = "https://onerecord.iata.org/ns/cargo#rateClassCodeBasic";
    public final static IRI p_rateClassCodeBasic = IRI.create(s_p_rateClassCodeBasic);
    /**
     * Rate Surcharge/Reduction - Percebtage of  red. / surcharge
     * 
     */
    public final static String s_p_ratePercentage = "https://onerecord.iata.org/ns/cargo#ratePercentage";
    public final static IRI p_ratePercentage = IRI.create(s_p_ratePercentage);
    /**
     * Rating used for pricing
     * 
     */
    public final static String s_p_ratings = "https://onerecord.iata.org/ns/cargo#ratings";
    public final static IRI p_ratings = IRI.create(s_p_ratings);
    /**
     * IATA 3-letter city code of the rate combination point as defined in TACT
     * 
     */
    public final static String s_p_rcp = "https://onerecord.iata.org/ns/cargo#rcp";
    public final static IRI p_rcp = IRI.create(s_p_rcp);
    /**
     * Regulated entity that tendered the consignment
     * 
     */
    public final static String s_p_receivedFrom = "https://onerecord.iata.org/ns/cargo#receivedFrom";
    public final static IRI p_receivedFrom = IRI.create(s_p_receivedFrom);
    /**
     * Reference to the Geolocation recorded of the measurement
     * 
     */
    public final static String s_p_recordedGeolocation = "https://onerecord.iata.org/ns/cargo#recordedGeolocation";
    public final static IRI p_recordedGeolocation = IRI.create(s_p_recordedGeolocation);
    /**
     * Reference to the Actor recording the LogisticsEvent
     * 
     */
    public final static String s_p_recordingActor = "https://onerecord.iata.org/ns/cargo#recordingActor";
    public final static IRI p_recordingActor = IRI.create(s_p_recordingActor);
    /**
     * Organization recording the LogisticsEvent
     * 
     */
    public final static String s_p_recordingOrganization = "https://onerecord.iata.org/ns/cargo#recordingOrganization";
    public final static IRI p_recordingOrganization = IRI.create(s_p_recordingOrganization);
    /**
     * References to the LogisticsObjects referring to this external reference
     * 
     */
    public final static String s_p_referenceForObjects = "https://onerecord.iata.org/ns/cargo#referenceForObjects";
    public final static IRI p_referenceForObjects = IRI.create(s_p_referenceForObjects);
    /**
     * Refers to the Booking
     * 
     */
    public final static String s_p_referredBookingOption = "https://onerecord.iata.org/ns/cargo#referredBookingOption";
    public final static IRI p_referredBookingOption = IRI.create(s_p_referredBookingOption);
    /**
     * Region/ State / Department. Refer ISO 3166-2
     * 
     */
    public final static String s_p_regionCode = "https://onerecord.iata.org/ns/cargo#regionCode";
    public final static IRI p_regionCode = IRI.create(s_p_regionCode);
    /**
     * Information about the accepting regulated entity of the Security Declaration
     * 
     */
    public final static String s_p_regulatedEntityAcceptor = "https://onerecord.iata.org/ns/cargo#regulatedEntityAcceptor";
    public final static IRI p_regulatedEntityAcceptor = IRI.create(s_p_regulatedEntityAcceptor);
    /**
     * Category code of the Regulated Entity
     * 
     */
    public final static String s_p_regulatedEntityCategory = "https://onerecord.iata.org/ns/cargo#regulatedEntityCategory";
    public final static IRI p_regulatedEntityCategory = IRI.create(s_p_regulatedEntityCategory);
    /**
     * Regulated entity issuing the Security Declaration
     * 
     */
    public final static String s_p_regulatedEntityIssuer = "https://onerecord.iata.org/ns/cargo#regulatedEntityIssuer";
    public final static IRI p_regulatedEntityIssuer = IRI.create(s_p_regulatedEntityIssuer);
    public final static String s_p_resultOfCheck = "https://onerecord.iata.org/ns/cargo#resultOfCheck";
    public final static IRI p_resultOfCheck = IRI.create(s_p_resultOfCheck);
    /**
     * Information about a result Value of any kind of the Check
     * 
     */
    public final static String s_p_resultValue = "https://onerecord.iata.org/ns/cargo#resultValue";
    public final static IRI p_resultValue = IRI.create(s_p_resultValue);
    /**
     * Screening methods which have been used to secure the cargo
     * PHS – Physical Inspection and/or hand search
     * VCK - Visual check
     * XRY- X-ray equipment
     * EDS - Explosive detection system
     * EDD - Explosive detection dogs
     * ETD - Explosive trace detection equipment - particles or vapor
     * CMD - Cargo metal detection
     * AOM - Subjected to any other means: this entry should be followed by free text specifying what other mean was used to secure the cargo
     * 
     */
    public final static String s_p_screeningMethods = "https://onerecord.iata.org/ns/cargo#screeningMethods";
    public final static IRI p_screeningMethods = IRI.create(s_p_screeningMethods);
    /**
     * Security details of the piece
     * 
     */
    public final static String s_p_securityDeclarations = "https://onerecord.iata.org/ns/cargo#securityDeclarations";
    public final static IRI p_securityDeclarations = IRI.create(s_p_securityDeclarations);
    /**
     * Security status indicator (CXML 1.13) - e.g. SPX- Cargo Secure for Passenger and All-Cargo Aircraft 
     * 
     */
    public final static String s_p_securityStatus = "https://onerecord.iata.org/ns/cargo#securityStatus";
    public final static IRI p_securityStatus = IRI.create(s_p_securityStatus);
    /**
     * Type of sensor as described in Interactive Cargo Recommended Practice
     * 
     */
    public final static String s_p_sensorType = "https://onerecord.iata.org/ns/cargo#sensorType";
    public final static IRI p_sensorType = IRI.create(s_p_sensorType);
    /**
     * Reference to the Activity the Action was performed for
     * 
     */
    public final static String s_p_servedActivity = "https://onerecord.iata.org/ns/cargo#servedActivity";
    public final static IRI p_servedActivity = IRI.create(s_p_servedActivity);
    /**
     * Reference to Services this Activity is executed for
     * 
     */
    public final static String s_p_servedServices = "https://onerecord.iata.org/ns/cargo#servedServices";
    public final static IRI p_servedServices = IRI.create(s_p_servedServices);
    /**
     * One letter service code as per bullet point 18.4 - data element 22Z from AWB
     * 
     */
    public final static String s_p_serviceCode = "https://onerecord.iata.org/ns/cargo#serviceCode";
    public final static IRI p_serviceCode = IRI.create(s_p_serviceCode);
    /**
     * Service level code
     * 
     */
    public final static String s_p_serviceLevelCode = "https://onerecord.iata.org/ns/cargo#serviceLevelCode";
    public final static IRI p_serviceLevelCode = IRI.create(s_p_serviceLevelCode);
    /**
     * Designator of serviceablity condition e.g. SER or DAM 
     * 
     */
    public final static String s_p_serviceabilityCode = "https://onerecord.iata.org/ns/cargo#serviceabilityCode";
    public final static IRI p_serviceabilityCode = IRI.create(s_p_serviceabilityCode);
    /**
     * Reference to the Shipment
     * 
     */
    public final static String s_p_shipment = "https://onerecord.iata.org/ns/cargo#shipment";
    public final static IRI p_shipment = IRI.create(s_p_shipment);
    /**
     * Signatory company name
     * 
     */
    public final static String s_p_signatoryCompany = "https://onerecord.iata.org/ns/cargo#signatoryCompany";
    public final static IRI p_signatoryCompany = IRI.create(s_p_signatoryCompany);
    /**
     * Role of the signatory with regards to the ePermit: Applicant, Permit issuer, Issuing Authority or Examining authority
     * 
     */
    public final static String s_p_signatoryRole = "https://onerecord.iata.org/ns/cargo#signatoryRole";
    public final static IRI p_signatoryRole = IRI.create(s_p_signatoryRole);
    /**
     * Code specifying a type of government action such as inspection, detention, fumigation, security.
     * 
     */
    public final static String s_p_signatureTypeCode = "https://onerecord.iata.org/ns/cargo#signatureTypeCode";
    public final static IRI p_signatureTypeCode = IRI.create(s_p_signatureTypeCode);
    /**
     * List of all the signatures of the Epermit (applicant box 4, issuing authority box 6, issuer box 13 and examining authority box 14)
     * 
     */
    public final static String s_p_signatures = "https://onerecord.iata.org/ns/cargo#signatures";
    public final static IRI p_signatures = IRI.create(s_p_signatures);
    /**
     * Three-letter special handling code (SPH)
     * 
     */
    public final static String s_p_specialHandlingCodes = "https://onerecord.iata.org/ns/cargo#specialHandlingCodes";
    public final static IRI p_specialHandlingCodes = IRI.create(s_p_specialHandlingCodes);
    /**
     * Description of specimens, CITES type code (box 9)
     * 
     */
    public final static String s_p_specimenTypeCode = "https://onerecord.iata.org/ns/cargo#specimenTypeCode";
    public final static IRI p_specimenTypeCode = IRI.create(s_p_specimenTypeCode);
    /**
     * Reference to the station (Airport), mandatory 
     * 
     */
    public final static String s_p_station = "https://onerecord.iata.org/ns/cargo#station";
    public final static IRI p_station = IRI.create(s_p_station);
    /**
     * Remarks related to specific stations in the routing (e.g. Embargo in XXX)
     * 
     */
    public final static String s_p_stationRemarks = "https://onerecord.iata.org/ns/cargo#stationRemarks";
    public final static IRI p_stationRemarks = IRI.create(s_p_stationRemarks);
    /**
     * Status of the Booking Option
     * 
     */
    public final static String s_p_statusBookingOption = "https://onerecord.iata.org/ns/cargo#statusBookingOption";
    public final static IRI p_statusBookingOption = IRI.create(s_p_statusBookingOption);
    /**
     * Reference to the Objects being stored in or stored out
     * 
     */
    public final static String s_p_storedObjects = "https://onerecord.iata.org/ns/cargo#storedObjects";
    public final static IRI p_storedObjects = IRI.create(s_p_storedObjects);
    /**
     * References to all StoringActions performed for the Storing Activity
     * 
     */
    public final static String s_p_storingActions = "https://onerecord.iata.org/ns/cargo#storingActions";
    public final static IRI p_storingActions = IRI.create(s_p_storingActions);
    /**
     * Enum stating whether the StoringAction describes the store-in or the store-out
     * 
     */
    public final static String s_p_storingType = "https://onerecord.iata.org/ns/cargo#storingType";
    public final static IRI p_storingType = IRI.create(s_p_storingType);
    /**
     * Reference to the Location this is a Sublocation of
     * 
     */
    public final static String s_p_subLocationOf = "https://onerecord.iata.org/ns/cargo#subLocationOf";
    public final static IRI p_subLocationOf = IRI.create(s_p_subLocationOf);
    /**
     * References to Sublocations that describe the Location in more detail
     * 
     */
    public final static String s_p_subLocations = "https://onerecord.iata.org/ns/cargo#subLocations";
    public final static IRI p_subLocations = IRI.create(s_p_subLocations);
    /**
     * References to all sub-Organizations
     * 
     */
    public final static String s_p_subOrganization = "https://onerecord.iata.org/ns/cargo#subOrganization";
    public final static IRI p_subOrganization = IRI.create(s_p_subOrganization);
    /**
     * Information Identifier. Code identifying a piece of information/entity e.g. "IMP" for import, "EXP" for export, "AGT" for Agent, "ISS" for The Regulated Agent Issuing the Security Status for a Consignment etc.
     * Condition: At least one of the three elements (Country Code, Information Identifier or Customs, Security and Regulatory Control Information Identifier) must be completed
     * 
     */
    public final static String s_p_subjectCode = "https://onerecord.iata.org/ns/cargo#subjectCode";
    public final static IRI p_subjectCode = IRI.create(s_p_subjectCode);
    /**
     * Tare weight of the empty ULD
     * 
     */
    public final static String s_p_tareWeight = "https://onerecord.iata.org/ns/cargo#tareWeight";
    public final static IRI p_tareWeight = IRI.create(s_p_tareWeight);
    /**
     * Item target country. Refer ISO 3166-2
     * 
     */
    public final static String s_p_targetCountry = "https://onerecord.iata.org/ns/cargo#targetCountry";
    public final static IRI p_targetCountry = IRI.create(s_p_targetCountry);
    /**
     * Tax due Agent (VAT/GST on Commission). Total VAT/TAX amount payable by airline to agent
     * 
     */
    public final static String s_p_taxDueAgent = "https://onerecord.iata.org/ns/cargo#taxDueAgent";
    public final static IRI p_taxDueAgent = IRI.create(s_p_taxDueAgent);
    /**
     * Tax due Airline (as per AWB, or VAT/GST as per invoice). Total VAT/TAX amount payable by agent to airline
     * 
     */
    public final static String s_p_taxDueAirline = "https://onerecord.iata.org/ns/cargo#taxDueAirline";
    public final static IRI p_taxDueAirline = IRI.create(s_p_taxDueAirline);
    /**
     * Temperature instructions if a specific range
     * 
     */
    public final static String s_p_temperatureInstructions = "https://onerecord.iata.org/ns/cargo#temperatureInstructions";
    public final static IRI p_temperatureInstructions = IRI.create(s_p_temperatureInstructions);
    /**
     * Preferred unit for temperature
     * 
     */
    public final static String s_p_temperatureUnit = "https://onerecord.iata.org/ns/cargo#temperatureUnit";
    public final static IRI p_temperatureUnit = IRI.create(s_p_temperatureUnit);
    /**
     * Schedule preferences of the request
     * 
     */
    public final static String s_p_timePreferences = "https://onerecord.iata.org/ns/cargo#timePreferences";
    public final static IRI p_timePreferences = IRI.create(s_p_timePreferences);
    /**
     * Dimensions of the whole shipment
     * 
     */
    public final static String s_p_totalDimensions = "https://onerecord.iata.org/ns/cargo#totalDimensions";
    public final static IRI p_totalDimensions = IRI.create(s_p_totalDimensions);
    /**
     * Total gross weight of the whole shipment
     * 
     */
    public final static String s_p_totalGrossWeight = "https://onerecord.iata.org/ns/cargo#totalGrossWeight";
    public final static IRI p_totalGrossWeight = IRI.create(s_p_totalGrossWeight);
    /**
     * Total volume fo the volume piece group
     * 
     */
    public final static String s_p_totalVolume = "https://onerecord.iata.org/ns/cargo#totalVolume";
    public final static IRI p_totalVolume = IRI.create(s_p_totalVolume);
    /**
     * Volumetric weight of the whole shipment
     * 
     */
    public final static String s_p_totalVolumetricWeight = "https://onerecord.iata.org/ns/cargo#totalVolumetricWeight";
    public final static IRI p_totalVolumetricWeight = IRI.create(s_p_totalVolumetricWeight);
    /**
     * Code indicating the purpose of the transaction (box 5a)
     * 
     */
    public final static String s_p_transactionPurposeCode = "https://onerecord.iata.org/ns/cargo#transactionPurposeCode";
    public final static IRI p_transactionPurposeCode = IRI.create(s_p_transactionPurposeCode);
    /**
     * Code specifying the transport document name (box 15)
     * 
     */
    public final static String s_p_transportContractTypeCode = "https://onerecord.iata.org/ns/cargo#transportContractTypeCode";
    public final static IRI p_transportContractTypeCode = IRI.create(s_p_transportContractTypeCode);
    /**
     * Reference to the Transport Legs of the proposed routing
     * 
     */
    public final static String s_p_transportLegs = "https://onerecord.iata.org/ns/cargo#transportLegs";
    public final static IRI p_transportLegs = IRI.create(s_p_transportLegs);
    /**
     * Type of transport means service, e.g. Aircraftor Truck
     * 
     */
    public final static String s_p_transportMeansServiceType = "https://onerecord.iata.org/ns/cargo#transportMeansServiceType";
    public final static IRI p_transportMeansServiceType = IRI.create(s_p_transportMeansServiceType);
    /**
     * Type of transport means, e.g. 744, RFS
     * 
     */
    public final static String s_p_transportMeansType = "https://onerecord.iata.org/ns/cargo#transportMeansType";
    public final static IRI p_transportMeansType = IRI.create(s_p_transportMeansType);
    /**
     * Company operating the transport means
     * 
     */
    public final static String s_p_transportOrganization = "https://onerecord.iata.org/ns/cargo#transportOrganization";
    public final static IRI p_transportOrganization = IRI.create(s_p_transportOrganization);
    /**
     * Packaging type identifier as per UNECE Rec 21 Annex V and VI e.g. 1A - Drum, steel - Packaging material code. Identifies the Logistic Unit package type. UN Recommendation on Transport of Dangerous Goods, Model Regulations 
     * 
     */
    public final static String s_p_typeCode = "https://onerecord.iata.org/ns/cargo#typeCode";
    public final static IRI p_typeCode = IRI.create(s_p_typeCode);
    /**
     * Required for some CO2 calculations
     * 
     */
    public final static String s_p_typicalCo2Coefficient = "https://onerecord.iata.org/ns/cargo#typicalCo2Coefficient";
    public final static IRI p_typicalCo2Coefficient = IRI.create(s_p_typicalCo2Coefficient);
    /**
     * Typical fuel comsumption (e.g. 2 L / 1 nm)
     * 
     */
    public final static String s_p_typicalFuelConsumption = "https://onerecord.iata.org/ns/cargo#typicalFuelConsumption";
    public final static IRI p_typicalFuelConsumption = IRI.create(s_p_typicalFuelConsumption);
    /**
     * Contour code as per IATA ULD Regulation
     * 
     */
    public final static String s_p_uldContourCode = "https://onerecord.iata.org/ns/cargo#uldContourCode";
    public final static IRI p_uldContourCode = IRI.create(s_p_uldContourCode);
    /**
     * Indicator related to ULD loading (e.g. Main deck only)
     * 
     */
    public final static String s_p_uldLoadingIndicator = "https://onerecord.iata.org/ns/cargo#uldLoadingIndicator";
    public final static IRI p_uldLoadingIndicator = IRI.create(s_p_uldLoadingIndicator);
    /**
     * Information about the ULD owner code described in a ULD specific piece or used for a rate in a Line Item
     * 
     */
    public final static String s_p_uldOwnerCode = "https://onerecord.iata.org/ns/cargo#uldOwnerCode";
    public final static IRI p_uldOwnerCode = IRI.create(s_p_uldOwnerCode);
    /**
     * ULD Rate information - ULD Rate Class Type
     * 
     */
    public final static String s_p_uldRateClassType = "https://onerecord.iata.org/ns/cargo#uldRateClassType";
    public final static IRI p_uldRateClassType = IRI.create(s_p_uldRateClassType);
    /**
     * Information about the ULD tare weight used for the rate descbribed by the Line Item
     * 
     */
    public final static String s_p_uldTareWeightForRate = "https://onerecord.iata.org/ns/cargo#uldTareWeightForRate";
    public final static IRI p_uldTareWeightForRate = IRI.create(s_p_uldTareWeightForRate);
    /**
     * Type of ULD as per IATA ULD Regulation
     * 
     */
    public final static String s_p_uldType = "https://onerecord.iata.org/ns/cargo#uldType";
    public final static IRI p_uldType = IRI.create(s_p_uldType);
    /**
     * Standard Unit Load Device type code e.g. AKE - Certified Container - Contoured. Refer to IATA ULD Technical Manual
     * 
     */
    public final static String s_p_uldTypeCode = "https://onerecord.iata.org/ns/cargo#uldTypeCode";
    public final static IRI p_uldTypeCode = IRI.create(s_p_uldTypeCode);
    /**
     * Unit of measurement as per MeasurementUnitCode codelist. If the code is not present, create an instance of MeasurementUnitCode based on UNECE Rec. 20 Rev. 17e-2021
     * 
     */
    public final static String s_p_unit = "https://onerecord.iata.org/ns/cargo#unit";
    public final static IRI p_unit = IRI.create(s_p_unit);
    /**
     * Product price per unit in the base
     * 
     */
    public final static String s_p_unitPrice = "https://onerecord.iata.org/ns/cargo#unitPrice";
    public final static IRI p_unitPrice = IRI.create(s_p_unitPrice);
    /**
     * Reference to unit preferences of the request (e.g. kg or cm)
     * 
     */
    public final static String s_p_unitsPreference = "https://onerecord.iata.org/ns/cargo#unitsPreference";
    public final static IRI p_unitsPreference = IRI.create(s_p_unitsPreference);
    /**
     * References to BookingOptionRequests that request to update the Booking
     * 
     */
    public final static String s_p_updateBookingOptionRequests = "https://onerecord.iata.org/ns/cargo#updateBookingOptionRequests";
    public final static IRI p_updateBookingOptionRequests = IRI.create(s_p_updateBookingOptionRequests);
    /**
     * Reference to the Check the template was used in
     * 
     */
    public final static String s_p_usedInCheck = "https://onerecord.iata.org/ns/cargo#usedInCheck";
    public final static IRI p_usedInCheck = IRI.create(s_p_usedInCheck);
    /**
     * Reference to the Template used in the Check
     * 
     */
    public final static String s_p_usedTemplate = "https://onerecord.iata.org/ns/cargo#usedTemplate";
    public final static IRI p_usedTemplate = IRI.create(s_p_usedTemplate);
    /**
     * Vehicle or container type. Refer UNECE28, e.g. 4.. - Aircraft, type unknown.For Air refer to IATA Standard Schedules Information Manua in section ATA/IATA Aircraft Types
     * 
     */
    public final static String s_p_vehicleType = "https://onerecord.iata.org/ns/cargo#vehicleType";
    public final static IRI p_vehicleType = IRI.create(s_p_vehicleType);
    /**
     * Volume
     * 
     */
    public final static String s_p_volume = "https://onerecord.iata.org/ns/cargo#volume";
    public final static IRI p_volume = IRI.create(s_p_volume);
    /**
     * Preferred unit for volume
     * 
     */
    public final static String s_p_volumeUnit = "https://onerecord.iata.org/ns/cargo#volumeUnit";
    public final static IRI p_volumeUnit = IRI.create(s_p_volumeUnit);
    /**
     * Volumetric weight details
     * 
     */
    public final static String s_p_volumetricWeight = "https://onerecord.iata.org/ns/cargo#volumetricWeight";
    public final static IRI p_volumetricWeight = IRI.create(s_p_volumetricWeight);
    /**
     * Volumetric weight used for the rate described by this line item
     * 
     */
    public final static String s_p_volumetricWeightForRate = "https://onerecord.iata.org/ns/cargo#volumetricWeightForRate";
    public final static IRI p_volumetricWeightForRate = IRI.create(s_p_volumetricWeightForRate);
    /**
     * Reference to the Waybill of the shipment
     * 
     */
    public final static String s_p_waybill = "https://onerecord.iata.org/ns/cargo#waybill";
    public final static IRI p_waybill = IRI.create(s_p_waybill);
    /**
     * Information about rates applying to this Waybill handled as line item
     * 
     */
    public final static String s_p_waybillLineItems = "https://onerecord.iata.org/ns/cargo#waybillLineItems";
    public final static IRI p_waybillLineItems = IRI.create(s_p_waybillLineItems);
    /**
     * Type of the Waybill: House, Direct or Master
     * 
     */
    public final static String s_p_waybillType = "https://onerecord.iata.org/ns/cargo#waybillType";
    public final static IRI p_waybillType = IRI.create(s_p_waybillType);
    /**
     * Weight of the item
     * 
     */
    public final static String s_p_weight = "https://onerecord.iata.org/ns/cargo#weight";
    public final static IRI p_weight = IRI.create(s_p_weight);
    /**
     * Preferred unit for weight
     * 
     */
    public final static String s_p_weightUnit = "https://onerecord.iata.org/ns/cargo#weightUnit";
    public final static IRI p_weightUnit = IRI.create(s_p_weightUnit);
    /**
     * Indicator whether the payment for the Weight/Valuation is to be made at origin (prepaid) or at destination (collect) as per bullet point 13 - data element 14a/14b from AWB
     * 
     */
    public final static String s_p_weightValuationIndicator = "https://onerecord.iata.org/ns/cargo#weightValuationIndicator";
    public final static IRI p_weightValuationIndicator = IRI.create(s_p_weightValuationIndicator);
    /**
     * Width
     * 
     */
    public final static String s_p_width = "https://onerecord.iata.org/ns/cargo#width";
    public final static IRI p_width = IRI.create(s_p_width);
    /**
     * Indicates the details of accounting information. Free text e.g. PAYMENT BY CERTIFIED CHEQUE etc.
     * 
     */
    public final static String s_p_accountingInformation = "https://onerecord.iata.org/ns/cargo#accountingInformation";
    public final static IRI p_accountingInformation = IRI.create(s_p_accountingInformation);
    /**
     * Defined in Resolution Conf. 13.6 and is required for pre-Convention specimens (box 12b)
     * 
     */
    public final static String s_p_acquisitionDateTime = "https://onerecord.iata.org/ns/cargo#acquisitionDateTime";
    public final static IRI p_acquisitionDateTime = IRI.create(s_p_acquisitionDateTime);
    /**
     * DateTime holding the end time of the Action; Type is indicated through ActionType property
     * 
     */
    public final static String s_p_actionEndTime = "https://onerecord.iata.org/ns/cargo#actionEndTime";
    public final static IRI p_actionEndTime = IRI.create(s_p_actionEndTime);
    /**
     * DateTime holding the start time of the Action; Type is indicated through ActionType property
     * 
     */
    public final static String s_p_actionStartTime = "https://onerecord.iata.org/ns/cargo#actionStartTime";
    public final static IRI p_actionStartTime = IRI.create(s_p_actionStartTime);
    /**
     * Numeric expression of the activity of a radioactive Item
     * 
     */
    public final static String s_p_activityLevelMeasure = "https://onerecord.iata.org/ns/cargo#activityLevelMeasure";
    public final static IRI p_activityLevelMeasure = IRI.create(s_p_activityLevelMeasure);
    /**
     * Identifies the subsidiary hazard class / division identification containing a numeric field separated by a decimal. There may be , 1 or 2 subsidiary risk classes or divisions. If there is more than one, each should be separated by a comma. The subsidiary risk must be shown in parentheses. 
     * 
     */
    public final static String s_p_additionalHazardClassificationId = "https://onerecord.iata.org/ns/cargo#additionalHazardClassificationId";
    public final static IRI p_additionalHazardClassificationId = IRI.create(s_p_additionalHazardClassificationId);
    /**
     * Additional infromation related to the Booking Option, e.g. sales details
     * 
     */
    public final static String s_p_additionalInformation = "https://onerecord.iata.org/ns/cargo#additionalInformation";
    public final static IRI p_additionalInformation = IRI.create(s_p_additionalInformation);
    /**
     * Any additional information that may be required by an ICAO Member State
     * 
     */
    public final static String s_p_additionalSecurityInformation = "https://onerecord.iata.org/ns/cargo#additionalSecurityInformation";
    public final static IRI p_additionalSecurityInformation = IRI.create(s_p_additionalSecurityInformation);
    /**
     * Contains the Special Handling Code related to the prescribed limitation. Hardcoded to PASSENGER AND CARGO AIRCRAFT or CARGO AIRCRAFT ONLY. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_aircraftLimitationInformation = "https://onerecord.iata.org/ns/cargo#aircraftLimitationInformation";
    public final static IRI p_aircraftLimitationInformation = IRI.create(s_p_aircraftLimitationInformation);
    /**
     * IATA two-character airline code
     * 
     */
    public final static String s_p_airlineCode = "https://onerecord.iata.org/ns/cargo#airlineCode";
    public final static IRI p_airlineCode = IRI.create(s_p_airlineCode);
    /**
     * A statement identifying that the dangerous goods listed above are all contained in the same outer packaging. Takes the form All packed in one aaaa (description of packaging type) x nn (number of packages). Applies to air transport only. (Air) 
     * 
     */
    public final static String s_p_allPackedInOneIndicator = "https://onerecord.iata.org/ns/cargo#allPackedInOneIndicator";
    public final static IRI p_allPackedInOneIndicator = IRI.create(s_p_allPackedInOneIndicator);
    /**
     * Description of the alternatives proposed that do not match the Booking Option Request
     * 
     */
    public final static String s_p_alternatives = "https://onerecord.iata.org/ns/cargo#alternatives";
    public final static IRI p_alternatives = IRI.create(s_p_alternatives);
    /**
     * total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 11a)
     * 
     */
    public final static String s_p_annualQuotaQuantity = "https://onerecord.iata.org/ns/cargo#annualQuotaQuantity";
    public final static IRI p_annualQuotaQuantity = IRI.create(s_p_annualQuotaQuantity);
    /**
     * Text restrictions to the Answer
     * 
     */
    public final static String s_p_answerOptionsText = "https://onerecord.iata.org/ns/cargo#answerOptionsText";
    public final static IRI p_answerOptionsText = IRI.create(s_p_answerOptionsText);
    /**
     * Value restrictions to the answer
     * 
     */
    public final static String s_p_answerOptionsValue = "https://onerecord.iata.org/ns/cargo#answerOptionsValue";
    public final static IRI p_answerOptionsValue = IRI.create(s_p_answerOptionsValue);
    /**
     * Arrival date and time of the leg
     * 
     */
    public final static String s_p_arrivalDate = "https://onerecord.iata.org/ns/cargo#arrivalDate";
    public final static IRI p_arrivalDate = IRI.create(s_p_arrivalDate);
    /**
     * US / ATA Unit Load Device type code e.g. M2
     * 
     */
    public final static String s_p_ataDesignator = "https://onerecord.iata.org/ns/cargo#ataDesignator";
    public final static IRI p_ataDesignator = IRI.create(s_p_ataDesignator);
    /**
     * Contains additional information relating to an approval, permission or other specific detail applicable to the commodity (e.g. Dangerous Goods in excepted quantities) 
     * 
     */
    public final static String s_p_authorizationInformation = "https://onerecord.iata.org/ns/cargo#authorizationInformation";
    public final static IRI p_authorizationInformation = IRI.create(s_p_authorizationInformation);
    /**
     * The Date AWB Acceptance should be the same as the Date AWB Delivery. (beginning of the process)
     * 
     */
    public final static String s_p_awbAcceptanceDate = "https://onerecord.iata.org/ns/cargo#awbAcceptanceDate";
    public final static IRI p_awbAcceptanceDate = IRI.create(s_p_awbAcceptanceDate);
    /**
     * The Date AWB Delivery is also used as the AWB Execution date which will determine which billing period it will be processed and billed in.
     * 
     */
    public final static String s_p_awbDeliveryDate = "https://onerecord.iata.org/ns/cargo#awbDeliveryDate";
    public final static IRI p_awbDeliveryDate = IRI.create(s_p_awbDeliveryDate);
    /**
     * The AWB execution date determines which billing period the document will be processed and billed in.
     * 
     */
    public final static String s_p_awbExecutionDate = "https://onerecord.iata.org/ns/cargo#awbExecutionDate";
    public final static IRI p_awbExecutionDate = IRI.create(s_p_awbExecutionDate);
    /**
     * Production batch number / reference
     * 
     */
    public final static String s_p_batchNumber = "https://onerecord.iata.org/ns/cargo#batchNumber";
    public final static IRI p_batchNumber = IRI.create(s_p_batchNumber);
    /**
     * Date upon which the certification is made by the carrier
     * 
     */
    public final static String s_p_carrierDeclarationDate = "https://onerecord.iata.org/ns/cargo#carrierDeclarationDate";
    public final static IRI p_carrierDeclarationDate = IRI.create(s_p_carrierDeclarationDate);
    /**
     * Contains the authentication of the Carrier
     * 
     */
    public final static String s_p_carrierDeclarationSignature = "https://onerecord.iata.org/ns/cargo#carrierDeclarationSignature";
    public final static IRI p_carrierDeclarationSignature = IRI.create(s_p_carrierDeclarationSignature);
    /**
     * Operations code ID. Refers to the number of the registered captive-breeding or artifical propagation operation (box 12b)
     * 
     */
    public final static String s_p_categoryCode = "https://onerecord.iata.org/ns/cargo#categoryCode";
    public final static IRI p_categoryCode = IRI.create(s_p_categoryCode);
    /**
     * Product characteristics code - e.g. CLR - Color. Not restricted to a list.
     * 
     */
    public final static String s_p_characteristicType = "https://onerecord.iata.org/ns/cargo#characteristicType";
    public final static IRI p_characteristicType = IRI.create(s_p_characteristicType);
    /**
     * Description of the charge e.g. Airfreight, fuel, etc.
     * 
     */
    public final static String s_p_chargeDescription = "https://onerecord.iata.org/ns/cargo#chargeDescription";
    public final static IRI p_chargeDescription = IRI.create(s_p_chargeDescription);
    /**
     * Free text remarks to the check result
     * 
     */
    public final static String s_p_checkRemark = "https://onerecord.iata.org/ns/cargo#checkRemark";
    public final static IRI p_checkRemark = IRI.create(s_p_checkRemark);
    /**
     * Checksum of the document to validate its integrity
     * 
     */
    public final static String s_p_checksum = "https://onerecord.iata.org/ns/cargo#checksum";
    public final static IRI p_checksum = IRI.create(s_p_checksum);
    /**
     * Code or short version of a code, for example "CH" for Switzerland when referring to the UN/LOCODE code list
     * 
     */
    public final static String s_p_code = "https://onerecord.iata.org/ns/cargo#code";
    public final static IRI p_code = IRI.create(s_p_code);
    /**
     * Description or long version of the code, for example "Switzerland" for Switzerland when referring to the UN/LOCODE code list
     * 
     */
    public final static String s_p_codeDescription = "https://onerecord.iata.org/ns/cargo#codeDescription";
    public final static IRI p_codeDescription = IRI.create(s_p_codeDescription);
    /**
     * Integer indicating the level of a code if a codelists is hierarchical, for example HS-Codes
     * 
     */
    public final static String s_p_codeLevel = "https://onerecord.iata.org/ns/cargo#codeLevel";
    public final static IRI p_codeLevel = IRI.create(s_p_codeLevel);
    /**
     * Official name of the code list without version number when direct reference is not possible, for example "UN/LOCODE" when referring to the UN/LOCODE code list
     * 
     */
    public final static String s_p_codeListName = "https://onerecord.iata.org/ns/cargo#codeListName";
    public final static IRI p_codeListName = IRI.create(s_p_codeListName);
    /**
     * URL to access the code list the code is taken from, for example "https://unece.org/trade/cefact/unlocode-code-list-country-and-territory" for UN/LOCODE.
     * 
     */
    public final static String s_p_codeListReference = "https://onerecord.iata.org/ns/cargo#codeListReference";
    public final static IRI p_codeListReference = IRI.create(s_p_codeListReference);
    /**
     * Version of the code list, for example "223-1" for UN/LOCODE. Used if the property codeListName is used or the version is not apparent from the resource referred to in property codeListReference.
     * 
     */
    public final static String s_p_codeListVersion = "https://onerecord.iata.org/ns/cargo#codeListVersion";
    public final static IRI p_codeListVersion = IRI.create(s_p_codeListVersion);
    /**
     * Coload indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_coload = "https://onerecord.iata.org/ns/cargo#coload";
    public final static IRI p_coload = IRI.create(s_p_coload);
    /**
     * The commission amount in favour of the Cargo Agent/Associate, applicable for the shipment concerned
     * 
     */
    public final static String s_p_commission = "https://onerecord.iata.org/ns/cargo#commission";
    public final static IRI p_commission = IRI.create(s_p_commission);
    /**
     * Indicates if commission is applied. Boolean
     * 
     */
    public final static String s_p_commissionIndicator = "https://onerecord.iata.org/ns/cargo#commissionIndicator";
    public final static IRI p_commissionIndicator = IRI.create(s_p_commissionIndicator);
    /**
     * The commission percentage in favour of the Cargo Agent/Associate, applicable for the shipment concerned
     * 
     */
    public final static String s_p_commissionPercentage = "https://onerecord.iata.org/ns/cargo#commissionPercentage";
    public final static IRI p_commissionPercentage = IRI.create(s_p_commissionPercentage);
    /**
     * Indicates the specific commodity on which the rate class code is applied
     * 
     */
    public final static String s_p_commodityItemNumber = "https://onerecord.iata.org/ns/cargo#commodityItemNumber";
    public final static IRI p_commodityItemNumber = IRI.create(s_p_commodityItemNumber);
    /**
     * commodityItemNumberForRate
     * 
     */
    public final static String s_p_commodityItemNumberForRate = "https://onerecord.iata.org/ns/cargo#commodityItemNumberForRate";
    public final static IRI p_commodityItemNumberForRate = IRI.create(s_p_commodityItemNumberForRate);
    /**
     * Contains the warning message complying with the regulations text note. This field is mandatory for air (Air) 
     * 
     */
    public final static String s_p_complianceDeclarationText = "https://onerecord.iata.org/ns/cargo#complianceDeclarationText";
    public final static IRI p_complianceDeclarationText = IRI.create(s_p_complianceDeclarationText);
    /**
     * Short text holding the process number if necessary
     * 
     */
    public final static String s_p_compositionIdentifier = "https://onerecord.iata.org/ns/cargo#compositionIdentifier";
    public final static IRI p_compositionIdentifier = IRI.create(s_p_compositionIdentifier);
    /**
     * Name of consignor signatory
     * 
     */
    public final static String s_p_consignorDeclarationSignature = "https://onerecord.iata.org/ns/cargo#consignorDeclarationSignature";
    public final static IRI p_consignorDeclarationSignature = IRI.create(s_p_consignorDeclarationSignature);
    /**
     * Indication if the shipment is a consolidation
     * 
     */
    public final static String s_p_consolidationIndicator = "https://onerecord.iata.org/ns/cargo#consolidationIndicator";
    public final static IRI p_consolidationIndicator = IRI.create(s_p_consolidationIndicator);
    /**
     * Volume to weight conversion factor
     * 
     */
    public final static String s_p_conversionFactor = "https://onerecord.iata.org/ns/cargo#conversionFactor";
    public final static IRI p_conversionFactor = IRI.create(s_p_conversionFactor);
    /**
     * Indicates if the permit is a copy (true) or an original (false) (box 1)
     * 
     */
    public final static String s_p_copyIndicator = "https://onerecord.iata.org/ns/cargo#copyIndicator";
    public final static IRI p_copyIndicator = IRI.create(s_p_copyIndicator);
    /**
     * Number of the adjustment
     * 
     */
    public final static String s_p_correctionNumber = "https://onerecord.iata.org/ns/cargo#correctionNumber";
    public final static IRI p_correctionNumber = IRI.create(s_p_correctionNumber);
    /**
     * Serial Number of the correction
     * 
     */
    public final static String s_p_correctionSerialNumber = "https://onerecord.iata.org/ns/cargo#correctionSerialNumber";
    public final static IRI p_correctionSerialNumber = IRI.create(s_p_correctionSerialNumber);
    /**
     * DateTime at which the LogisticsEvent was posted
     * 
     */
    public final static String s_p_creationDate = "https://onerecord.iata.org/ns/cargo#creationDate";
    public final static IRI p_creationDate = IRI.create(s_p_creationDate);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI.
     * 
     */
    public final static String s_p_criticalitySafetyIndexNumeric = "https://onerecord.iata.org/ns/cargo#criticalitySafetyIndexNumeric";
    public final static IRI p_criticalitySafetyIndexNumeric = IRI.create(s_p_criticalitySafetyIndexNumeric);
    /**
     * Indicates if the ULD is Damaged
     * 
     */
    public final static String s_p_damageFlag = "https://onerecord.iata.org/ns/cargo#damageFlag";
    public final static IRI p_damageFlag = IRI.create(s_p_damageFlag);
    /**
     * DateTime on which the CheckTemplate was released
     * 
     */
    public final static String s_p_date = "https://onerecord.iata.org/ns/cargo#date";
    public final static IRI p_date = IRI.create(s_p_date);
    /**
     * Department / Division / Unit
     * 
     */
    public final static String s_p_department = "https://onerecord.iata.org/ns/cargo#department";
    public final static IRI p_department = IRI.create(s_p_department);
    /**
     * Departure date and time of the leg
     * 
     */
    public final static String s_p_departureDate = "https://onerecord.iata.org/ns/cargo#departureDate";
    public final static IRI p_departureDate = IRI.create(s_p_departureDate);
    /**
     * Natural language description if required
     * 
     */
    public final static String s_p_description = "https://onerecord.iata.org/ns/cargo#description";
    public final static IRI p_description = IRI.create(s_p_description);
    /**
     * Conversion rate applied
     * 
     */
    public final static String s_p_destinationCurrencyRate = "https://onerecord.iata.org/ns/cargo#destinationCurrencyRate";
    public final static IRI p_destinationCurrencyRate = IRI.create(s_p_destinationCurrencyRate);
    /**
     * Commercial denomination of the device
     * 
     */
    public final static String s_p_deviceModel = "https://onerecord.iata.org/ns/cargo#deviceModel";
    public final static IRI p_deviceModel = IRI.create(s_p_deviceModel);
    /**
     * This is used as a discount to the “official” transportation charge on AWB to arrive at actual selling price
     * 
     */
    public final static String s_p_discount = "https://onerecord.iata.org/ns/cargo#discount";
    public final static IRI p_discount = IRI.create(s_p_discount);
    /**
     * Unique document identifier
     * 
     */
    public final static String s_p_documentIdentifier = "https://onerecord.iata.org/ns/cargo#documentIdentifier";
    public final static IRI p_documentIdentifier = IRI.create(s_p_documentIdentifier);
    /**
     * Link to the document, e.g. URL of the file where it is hosted
     * 
     */
    public final static String s_p_documentLink = "https://onerecord.iata.org/ns/cargo#documentLink";
    public final static IRI p_documentLink = IRI.create(s_p_documentLink);
    /**
     * If no DocumentType provided, name of the referenced document 
     * 
     */
    public final static String s_p_documentName = "https://onerecord.iata.org/ns/cargo#documentName";
    public final static IRI p_documentName = IRI.create(s_p_documentName);
    /**
     * Type of the referenced document . Can refer UNEDIFACT 11  e.g. 74 - Air Waybill, but not limited to
     * 
     */
    public final static String s_p_documentType = "https://onerecord.iata.org/ns/cargo#documentType";
    public final static IRI p_documentType = IRI.create(s_p_documentType);
    /**
     * Document version number
     * 
     */
    public final static String s_p_documentVersion = "https://onerecord.iata.org/ns/cargo#documentVersion";
    public final static IRI p_documentVersion = IRI.create(s_p_documentVersion);
    /**
     * Earliest acceptance date time (requested or proposed)
     * 
     */
    public final static String s_p_earliestAcceptanceTime = "https://onerecord.iata.org/ns/cargo#earliestAcceptanceTime";
    public final static IRI p_earliestAcceptanceTime = IRI.create(s_p_earliestAcceptanceTime);
    /**
     * Employee ID
     * 
     */
    public final static String s_p_employeeId = "https://onerecord.iata.org/ns/cargo#employeeId";
    public final static IRI p_employeeId = IRI.create(s_p_employeeId);
    /**
     * The original number is a unique number allocated to each document by the relevant Management Authority. (box 1)
     * 
     */
    public final static String s_p_epermitNumber = "https://onerecord.iata.org/ns/cargo#epermitNumber";
    public final static IRI p_epermitNumber = IRI.create(s_p_epermitNumber);
    /**
     * Date and time of the event
     * 
     */
    public final static String s_p_eventDate = "https://onerecord.iata.org/ns/cargo#eventDate";
    public final static IRI p_eventDate = IRI.create(s_p_eventDate);
    /**
     * If no EventCode provided, event name - e.g. Security clearance
     * 
     */
    public final static String s_p_eventName = "https://onerecord.iata.org/ns/cargo#eventName";
    public final static IRI p_eventName = IRI.create(s_p_eventName);
    /**
     * The Rate at which the Air Waybill Amount has been multiplied to arrive at the amount of settlement.
     * 
     */
    public final static String s_p_exchangeRate = "https://onerecord.iata.org/ns/cargo#exchangeRate";
    public final static IRI p_exchangeRate = IRI.create(s_p_exchangeRate);
    /**
     * Indicates an exclusive use shipment
     * 
     */
    public final static String s_p_exclusiveUseIndicator = "https://onerecord.iata.org/ns/cargo#exclusiveUseIndicator";
    public final static IRI p_exclusiveUseIndicator = IRI.create(s_p_exclusiveUseIndicator);
    /**
     * Product expiry date - e.g. for perishables goods or goods with programmed obsolescence
     * 
     */
    public final static String s_p_expiryDate = "https://onerecord.iata.org/ns/cargo#expiryDate";
    public final static IRI p_expiryDate = IRI.create(s_p_expiryDate);
    /**
     * First name / given name
     * 
     */
    public final static String s_p_firstName = "https://onerecord.iata.org/ns/cargo#firstName";
    public final static IRI p_firstName = IRI.create(s_p_firstName);
    /**
     * Indicates if Fissile is excepted
     * 
     */
    public final static String s_p_fissileExceptionIndicator = "https://onerecord.iata.org/ns/cargo#fissileExceptionIndicator";
    public final static IRI p_fissileExceptionIndicator = IRI.create(s_p_fissileExceptionIndicator);
    /**
     * Fissile exception reference, mandatory if Fissile Exception Indicator is true.
     * 
     */
    public final static String s_p_fissileExceptionReference = "https://onerecord.iata.org/ns/cargo#fissileExceptionReference";
    public final static IRI p_fissileExceptionReference = IRI.create(s_p_fissileExceptionReference);
    /**
     * e.g. Kerosene, Diesel, SAF, Electricity [renewable], Electricity [non-renewable]
     * 
     */
    public final static String s_p_fuelType = "https://onerecord.iata.org/ns/cargo#fuelType";
    public final static IRI p_fuelType = IRI.create(s_p_fuelType);
    /**
     * Description of goods, for the BookingShipment the commodity list defined by Modernizing Cargo Distribution MCD working group can be used as a referential.
     * 
     */
    public final static String s_p_goodsDescription = "https://onerecord.iata.org/ns/cargo#goodsDescription";
    public final static IRI p_goodsDescription = IRI.create(s_p_goodsDescription);
    /**
     * Goods description used in the rate described by the Line Item
     * 
     */
    public final static String s_p_goodsDescriptionForRate = "https://onerecord.iata.org/ns/cargo#goodsDescriptionForRate";
    public final static IRI p_goodsDescriptionForRate = IRI.create(s_p_goodsDescriptionForRate);
    /**
     * Total price
     * 
     */
    public final static String s_p_grandTotal = "https://onerecord.iata.org/ns/cargo#grandTotal";
    public final static IRI p_grandTotal = IRI.create(s_p_grandTotal);
    /**
     * Free text. This may include items such as Control temperature for substances stabilized by temperature control, name and telephone number of a responsible person for infectious substances. 
     * 
     */
    public final static String s_p_handlingInformation = "https://onerecord.iata.org/ns/cargo#handlingInformation";
    public final static IRI p_handlingInformation = IRI.create(s_p_handlingInformation);
    /**
     * Identifies the hazard class / division identification containing a numeric field separated by a decimal
     * 
     */
    public final static String s_p_hazardClassificationId = "https://onerecord.iata.org/ns/cargo#hazardClassificationId";
    public final static IRI p_hazardClassificationId = IRI.create(s_p_hazardClassificationId);
    /**
     * Commodity description
     * 
     */
    public final static String s_p_hsCommodityDescription = "https://onerecord.iata.org/ns/cargo#hsCommodityDescription";
    public final static IRI p_hsCommodityDescription = IRI.create(s_p_hsCommodityDescription);
    /**
     * If no Code provided, name of commodity
     * 
     */
    public final static String s_p_hsCommodityName = "https://onerecord.iata.org/ns/cargo#hsCommodityName";
    public final static IRI p_hsCommodityName = IRI.create(s_p_hsCommodityName);
    /**
     * Reference identifying the type of standard code to be used for the Commodity Classification (Brussels Tariff Nomenclature, EU Harmonized System Code, UN Standard International Trade Classification). Mandatory if the commodity code is more than 6 digits
     * 
     */
    public final static String s_p_hsType = "https://onerecord.iata.org/ns/cargo#hsType";
    public final static IRI p_hsType = IRI.create(s_p_hsType);
    /**
     * IATA accredited cargo agent 7 digit number
     * 
     */
    public final static String s_p_iataCargoAgentCode = "https://onerecord.iata.org/ns/cargo#iataCargoAgentCode";
    public final static IRI p_iataCargoAgentCode = IRI.create(s_p_iataCargoAgentCode);
    /**
     * IATA CASS cargo agent 4 digit branch number / location identifier
     * 
     */
    public final static String s_p_iataCargoAgentLocationIdentifier = "https://onerecord.iata.org/ns/cargo#iataCargoAgentLocationIdentifier";
    public final static IRI p_iataCargoAgentLocationIdentifier = IRI.create(s_p_iataCargoAgentLocationIdentifier);
    /**
     * Id of each radionuclide or for mixtures of radionuclides.
     * 
     */
    public final static String s_p_isotopeId = "https://onerecord.iata.org/ns/cargo#isotopeId";
    public final static IRI p_isotopeId = IRI.create(s_p_isotopeId);
    /**
     * The name or symbol of each radionuclide or for mixtures of radionuclides, an appropriate general description, or a list of the most restrictive radionuclides. 
     * 
     */
    public final static String s_p_isotopeName = "https://onerecord.iata.org/ns/cargo#isotopeName";
    public final static IRI p_isotopeName = IRI.create(s_p_isotopeName);
    /**
     * Date and time when the security status was issued
     * 
     */
    public final static String s_p_issuedOn = "https://onerecord.iata.org/ns/cargo#issuedOn";
    public final static IRI p_issuedOn = IRI.create(s_p_issuedOn);
    /**
     * Job title / position
     * 
     */
    public final static String s_p_jobTitle = "https://onerecord.iata.org/ns/cargo#jobTitle";
    public final static IRI p_jobTitle = IRI.create(s_p_jobTitle);
    /**
     * Indication if shipper is a Known Shipper as per TSA grant
     * 
     */
    public final static String s_p_knownShipper = "https://onerecord.iata.org/ns/cargo#knownShipper";
    public final static IRI p_knownShipper = IRI.create(s_p_knownShipper);
    /**
     * Last name / family name / surname
     * 
     */
    public final static String s_p_lastName = "https://onerecord.iata.org/ns/cargo#lastName";
    public final static IRI p_lastName = IRI.create(s_p_lastName);
    /**
     * Latest Acceptance time as per CargoIQ definition (requested, proposed or actual)
     * 
     */
    public final static String s_p_latestAcceptanceTime = "https://onerecord.iata.org/ns/cargo#latestAcceptanceTime";
    public final static IRI p_latestAcceptanceTime = IRI.create(s_p_latestAcceptanceTime);
    /**
     * Latest arrival time at destination
     * 
     */
    public final static String s_p_latestArrivalTime = "https://onerecord.iata.org/ns/cargo#latestArrivalTime";
    public final static IRI p_latestArrivalTime = IRI.create(s_p_latestArrivalTime);
    /**
     * Location latitude decimal
     * 
     */
    public final static String s_p_latitude = "https://onerecord.iata.org/ns/cargo#latitude";
    public final static IRI p_latitude = IRI.create(s_p_latitude);
    /**
     * Leg number
     * 
     */
    public final static String s_p_legNumber = "https://onerecord.iata.org/ns/cargo#legNumber";
    public final static IRI p_legNumber = IRI.create(s_p_legNumber);
    /**
     * Number of the line item
     * 
     */
    public final static String s_p_lineItemNumber = "https://onerecord.iata.org/ns/cargo#lineItemNumber";
    public final static IRI p_lineItemNumber = IRI.create(s_p_lineItemNumber);
    /**
     * Short text stating the loading position in the TransportMeans
     * 
     */
    public final static String s_p_loadingPositionIdentifier = "https://onerecord.iata.org/ns/cargo#loadingPositionIdentifier";
    public final static IRI p_loadingPositionIdentifier = IRI.create(s_p_loadingPositionIdentifier);
    /**
     * Full name of the location
     * 
     */
    public final static String s_p_locationName = "https://onerecord.iata.org/ns/cargo#locationName";
    public final static IRI p_locationName = IRI.create(s_p_locationName);
    /**
     * Location type - e.g. Airport, Freight terminal, Rail station, Seaport, etc
     * 
     */
    public final static String s_p_locationType = "https://onerecord.iata.org/ns/cargo#locationType";
    public final static IRI p_locationType = IRI.create(s_p_locationType);
    /**
     * Long text of the question
     * 
     */
    public final static String s_p_longText = "https://onerecord.iata.org/ns/cargo#longText";
    public final static IRI p_longText = IRI.create(s_p_longText);
    /**
     * Location longitude decimal
     * 
     */
    public final static String s_p_longitude = "https://onerecord.iata.org/ns/cargo#longitude";
    public final static IRI p_longitude = IRI.create(s_p_longitude);
    /**
     * Production lot number / reference
     * 
     */
    public final static String s_p_lotNumber = "https://onerecord.iata.org/ns/cargo#lotNumber";
    public final static IRI p_lotNumber = IRI.create(s_p_lotNumber);
    /**
     * A notation that the material is low dispersible radioactive material.
     * 
     */
    public final static String s_p_lowDispersibleIndicator = "https://onerecord.iata.org/ns/cargo#lowDispersibleIndicator";
    public final static IRI p_lowDispersibleIndicator = IRI.create(s_p_lowDispersibleIndicator);
    /**
     * Model of the LoadingMaterial if any
     * 
     */
    public final static String s_p_materialModel = "https://onerecord.iata.org/ns/cargo#materialModel";
    public final static IRI p_materialModel = IRI.create(s_p_materialModel);
    /**
     * Type of the LoadingMaterial
     * 
     */
    public final static String s_p_materialType = "https://onerecord.iata.org/ns/cargo#materialType";
    public final static IRI p_materialType = IRI.create(s_p_materialType);
    /**
     * Maximum number of segments for the transportation of the goods. 1 means direct flight
     * 
     */
    public final static String s_p_maxSegments = "https://onerecord.iata.org/ns/cargo#maxSegments";
    public final static IRI p_maxSegments = IRI.create(s_p_maxSegments);
    /**
     * Maximum quantity
     * 
     */
    public final static String s_p_maximumQuantity = "https://onerecord.iata.org/ns/cargo#maximumQuantity";
    public final static IRI p_maximumQuantity = IRI.create(s_p_maximumQuantity);
    /**
     * Timestamp for the measurement
     * 
     */
    public final static String s_p_measurementTimestamp = "https://onerecord.iata.org/ns/cargo#measurementTimestamp";
    public final static IRI p_measurementTimestamp = IRI.create(s_p_measurementTimestamp);
    /**
     * Name of the CO2 calculation method
     * 
     */
    public final static String s_p_methodName = "https://onerecord.iata.org/ns/cargo#methodName";
    public final static IRI p_methodName = IRI.create(s_p_methodName);
    /**
     * Version used for the calculation
     * 
     */
    public final static String s_p_methodVersion = "https://onerecord.iata.org/ns/cargo#methodVersion";
    public final static IRI p_methodVersion = IRI.create(s_p_methodVersion);
    /**
     * Middle name/ other name
     * 
     */
    public final static String s_p_middleName = "https://onerecord.iata.org/ns/cargo#middleName";
    public final static IRI p_middleName = IRI.create(s_p_middleName);
    /**
     * Minimum quantity
     * 
     */
    public final static String s_p_minimumQuantity = "https://onerecord.iata.org/ns/cargo#minimumQuantity";
    public final static IRI p_minimumQuantity = IRI.create(s_p_minimumQuantity);
    /**
     * The check is a Modular 7 validation on the AWB number, recorded as a boolean.
     * 
     */
    public final static String s_p_modularCheckNumber = "https://onerecord.iata.org/ns/cargo#modularCheckNumber";
    public final static IRI p_modularCheckNumber = IRI.create(s_p_modularCheckNumber);
    /**
     * Timestamp (date and time) of the movement time. If the movement time is recorded asynchronously, the timestamp should reflect the actual time, not when the data was created.
     * 
     */
    public final static String s_p_movementTimestamp = "https://onerecord.iata.org/ns/cargo#movementTimestamp";
    public final static IRI p_movementTimestamp = IRI.create(s_p_movementTimestamp);
    /**
     * Human-understandable name of object depending on the context
     * 
     */
    public final static String s_p_name = "https://onerecord.iata.org/ns/cargo#name";
    public final static IRI p_name = IRI.create(s_p_name);
    /**
     * Number of corrections to CASS records
     * 
     */
    public final static String s_p_nbCorrections = "https://onerecord.iata.org/ns/cargo#nbCorrections";
    public final static IRI p_nbCorrections = IRI.create(s_p_nbCorrections);
    /**
     * Free text for customs remarks, not used in OCI Composition Rules Table
     * 
     */
    public final static String s_p_note = "https://onerecord.iata.org/ns/cargo#note";
    public final static IRI p_note = IRI.create(s_p_note);
    /**
     * Number of doors
     * 
     */
    public final static String s_p_numberOfDoors = "https://onerecord.iata.org/ns/cargo#numberOfDoors";
    public final static IRI p_numberOfDoors = IRI.create(s_p_numberOfDoors);
    /**
     * Number of fittings
     * 
     */
    public final static String s_p_numberOfFittings = "https://onerecord.iata.org/ns/cargo#numberOfFittings";
    public final static IRI p_numberOfFittings = IRI.create(s_p_numberOfFittings);
    /**
     * Number of nets
     * 
     */
    public final static String s_p_numberOfNets = "https://onerecord.iata.org/ns/cargo#numberOfNets";
    public final static IRI p_numberOfNets = IRI.create(s_p_numberOfNets);
    /**
     * Number of straps
     * 
     */
    public final static String s_p_numberOfStraps = "https://onerecord.iata.org/ns/cargo#numberOfStraps";
    public final static IRI p_numberOfStraps = IRI.create(s_p_numberOfStraps);
    /**
     * Numerical value
     * 
     */
    public final static String s_p_numericalValue = "https://onerecord.iata.org/ns/cargo#numericalValue";
    public final static IRI p_numericalValue = IRI.create(s_p_numericalValue);
    /**
     * When no value is declared for Carriage, this field may be completed with the value TRUE otherwise FALSE
     * 
     */
    public final static String s_p_nvdForCarriage = "https://onerecord.iata.org/ns/cargo#nvdForCarriage";
    public final static IRI p_nvdForCarriage = IRI.create(s_p_nvdForCarriage);
    /**
     * When no value is declared for Customs, this field may be completed with the value TRUE otherwise FALSE
     * 
     */
    public final static String s_p_nvdForCustoms = "https://onerecord.iata.org/ns/cargo#nvdForCustoms";
    public final static IRI p_nvdForCustoms = IRI.create(s_p_nvdForCustoms);
    /**
     * Date and time of beginning of offer validity
     * 
     */
    public final static String s_p_offerValidFrom = "https://onerecord.iata.org/ns/cargo#offerValidFrom";
    public final static IRI p_offerValidFrom = IRI.create(s_p_offerValidFrom);
    /**
     * Date and time of end of offer validity
     * 
     */
    public final static String s_p_offerValidTo = "https://onerecord.iata.org/ns/cargo#offerValidTo";
    public final static IRI p_offerValidTo = IRI.create(s_p_offerValidTo);
    /**
     * Issuing date for Origin reference permit or re-export reference Certificate (box 12)
     * 
     */
    public final static String s_p_originReferencePermitDateTime = "https://onerecord.iata.org/ns/cargo#originReferencePermitDateTime";
    public final static IRI p_originReferencePermitDateTime = IRI.create(s_p_originReferencePermitDateTime);
    /**
     * identifier of Origin reference permit or re-export reference Certificate (box 12/12a)
     * 
     */
    public final static String s_p_originReferencePermitId = "https://onerecord.iata.org/ns/cargo#originReferencePermitId";
    public final static IRI p_originReferencePermitId = IRI.create(s_p_originReferencePermitId);
    /**
     * Supplementary Customs, Security and Regulatory Control Information
     * 
     */
    public final static String s_p_otherCustomsInformation = "https://onerecord.iata.org/ns/cargo#otherCustomsInformation";
    public final static IRI p_otherCustomsInformation = IRI.create(s_p_otherCustomsInformation);
    /**
     * Identifier type or description
     * 
     */
    public final static String s_p_otherIdentifierType = "https://onerecord.iata.org/ns/cargo#otherIdentifierType";
    public final static IRI p_otherIdentifierType = IRI.create(s_p_otherIdentifierType);
    /**
     * Other methods used to secure the cargo
     * 
     */
    public final static String s_p_otherScreeningMethods = "https://onerecord.iata.org/ns/cargo#otherScreeningMethods";
    public final static IRI p_otherScreeningMethods = IRI.create(s_p_otherScreeningMethods);
    /**
     * Applies to fissile material only, other than fissile excepted. A numeric value expressed to one decimal place preceded by the letters CSI. 
     * 
     */
    public final static String s_p_overpackCriticalitySafetyIndexNumeric = "https://onerecord.iata.org/ns/cargo#overpackCriticalitySafetyIndexNumeric";
    public final static IRI p_overpackCriticalitySafetyIndexNumeric = IRI.create(s_p_overpackCriticalitySafetyIndexNumeric);
    /**
     * Overpack indicator 
     * 
     */
    public final static String s_p_overpackIndicator = "https://onerecord.iata.org/ns/cargo#overpackIndicator";
    public final static IRI p_overpackIndicator = IRI.create(s_p_overpackIndicator);
    /**
     * A single number assigned to a package, overpack or freight container to provide control over radiation exposure. 
     * 
     */
    public final static String s_p_overpackT1 = "https://onerecord.iata.org/ns/cargo#overpackT1";
    public final static IRI p_overpackT1 = IRI.create(s_p_overpackT1);
    /**
     * SSCC-18 code for the value of the package mark, company or bar code, free text, pallet code, etc.
     * 
     */
    public final static String s_p_packagedeIdentifier = "https://onerecord.iata.org/ns/cargo#packagedeIdentifier";
    public final static IRI p_packagedeIdentifier = IRI.create(s_p_packagedeIdentifier);
    /**
     * The packing instruction number applicable to the UN number / proper shipping name entry. A three-numeric value which may be preceded by the letter Y.  Mandatory field for air transport (Air) 
     * 
     */
    public final static String s_p_packingInstructionNumber = "https://onerecord.iata.org/ns/cargo#packingInstructionNumber";
    public final static IRI p_packingInstructionNumber = IRI.create(s_p_packingInstructionNumber);
    /**
     * Boolean indicating that the LogisticsEvent is only applicable for parts of the LogisticObject it was recorded for, for example for some Pieces of a Shipment
     * 
     */
    public final static String s_p_partialEventIndicator = "https://onerecord.iata.org/ns/cargo#partialEventIndicator";
    public final static IRI p_partialEventIndicator = IRI.create(s_p_partialEventIndicator);
    /**
     * Boolean indicating whether the Check was passed
     * 
     */
    public final static String s_p_passed = "https://onerecord.iata.org/ns/cargo#passed";
    public final static IRI p_passed = IRI.create(s_p_passed);
    /**
     * Description if TypeCode is Other (box 1)
     * 
     */
    public final static String s_p_permitTypeOtherDescription = "https://onerecord.iata.org/ns/cargo#permitTypeOtherDescription";
    public final static IRI p_permitTypeOtherDescription = IRI.create(s_p_permitTypeOtherDescription);
    /**
     * Number of pieces for which the rate description details apply
     * 
     */
    public final static String s_p_pieceCountForRate = "https://onerecord.iata.org/ns/cargo#pieceCountForRate";
    public final static IRI p_pieceCountForRate = IRI.create(s_p_pieceCountForRate);
    /**
     * Number of pieces in the piece group
     * 
     */
    public final static String s_p_pieceGroupCount = "https://onerecord.iata.org/ns/cargo#pieceGroupCount";
    public final static IRI p_pieceGroupCount = IRI.create(s_p_pieceGroupCount);
    /**
     * Identifier of the piece group, increasing integers
     * 
     */
    public final static String s_p_pieceGroupId = "https://onerecord.iata.org/ns/cargo#pieceGroupId";
    public final static IRI p_pieceGroupId = IRI.create(s_p_pieceGroupId);
    /**
     * Post Office box number / code
     * 
     */
    public final static String s_p_postOfficeBox = "https://onerecord.iata.org/ns/cargo#postOfficeBox";
    public final static IRI p_postOfficeBox = IRI.create(s_p_postOfficeBox);
    /**
     * When part of the Request it refers to the preferred Transport ID from the customer. When part of the BookingOption (offer or actual booking) it refers to the expected Transport ID or flight
     * 
     */
    public final static String s_p_preferredTransportId = "https://onerecord.iata.org/ns/cargo#preferredTransportId";
    public final static IRI p_preferredTransportId = IRI.create(s_p_preferredTransportId);
    /**
     * IATA three-numeric airline prefix number
     * 
     */
    public final static String s_p_prefix = "https://onerecord.iata.org/ns/cargo#prefix";
    public final static IRI p_prefix = IRI.create(s_p_prefix);
    /**
     * Reference to a price reference if existing (e.g. Allotment number, contract reference, etc.)
     * 
     */
    public final static String s_p_priceReferenceId = "https://onerecord.iata.org/ns/cargo#priceReferenceId";
    public final static IRI p_priceReferenceId = IRI.create(s_p_priceReferenceId);
    /**
     * Specification of the price e.g. Street, Group, Spot, etc.
     * 
     */
    public final static String s_p_priceSpecification = "https://onerecord.iata.org/ns/cargo#priceSpecification";
    public final static IRI p_priceSpecification = IRI.create(s_p_priceSpecification);
    /**
     * Carrier's product description
     * 
     */
    public final static String s_p_productDescription = "https://onerecord.iata.org/ns/cargo#productDescription";
    public final static IRI p_productDescription = IRI.create(s_p_productDescription);
    /**
     * Production date
     * 
     */
    public final static String s_p_productionDate = "https://onerecord.iata.org/ns/cargo#productionDate";
    public final static IRI p_productionDate = IRI.create(s_p_productionDate);
    /**
     * The name used to describe the particular article or substance as shown in the UN Model Regulations Dangerous Goods List
     * 
     */
    public final static String s_p_properShippingName = "https://onerecord.iata.org/ns/cargo#properShippingName";
    public final static IRI p_properShippingName = IRI.create(s_p_properShippingName);
    /**
     * Most instances of all packed in one will require the addition of the Q value which  1. Applies to air transport only. (Air)  
     * 
     */
    public final static String s_p_qValueNumeric = "https://onerecord.iata.org/ns/cargo#qValueNumeric";
    public final static IRI p_qValueNumeric = IRI.create(s_p_qValueNumeric);
    /**
     * Quantity for the charge if applicable
     * 
     */
    public final static String s_p_quantity = "https://onerecord.iata.org/ns/cargo#quantity";
    public final static IRI p_quantity = IRI.create(s_p_quantity);
    /**
     * Quantity including units (box 11)
     * 
     */
    public final static String s_p_quantityAnimals = "https://onerecord.iata.org/ns/cargo#quantityAnimals";
    public final static IRI p_quantityAnimals = IRI.create(s_p_quantityAnimals);
    /**
     * Product quantity for unit price - e.g. 12 (eggs for one USD 1)
     * 
     */
    public final static String s_p_quantityForUnitPrice = "https://onerecord.iata.org/ns/cargo#quantityForUnitPrice";
    public final static IRI p_quantityForUnitPrice = IRI.create(s_p_quantityForUnitPrice);
    /**
     * Number of the Question within the template (alphanumeric)
     * 
     */
    public final static String s_p_questionNumber = "https://onerecord.iata.org/ns/cargo#questionNumber";
    public final static IRI p_questionNumber = IRI.create(s_p_questionNumber);
    /**
     * Section of the CheckTemplate this Question is part of
     * 
     */
    public final static String s_p_questionSection = "https://onerecord.iata.org/ns/cargo#questionSection";
    public final static IRI p_questionSection = IRI.create(s_p_questionSection);
    /**
     * A free text for user to include a reason for correction
     * 
     */
    public final static String s_p_reasonsForAdjustments = "https://onerecord.iata.org/ns/cargo#reasonsForAdjustments";
    public final static IRI p_reasonsForAdjustments = IRI.create(s_p_reasonsForAdjustments);
    /**
     * Expiry date 4 digits month/year
     * 
     */
    public final static String s_p_regulatedEntityExpiryDate = "https://onerecord.iata.org/ns/cargo#regulatedEntityExpiryDate";
    public final static IRI p_regulatedEntityExpiryDate = IRI.create(s_p_regulatedEntityExpiryDate);
    /**
     * Regulated entity identifier as per IATA e-CSD/CSD Resolution 65
     * 
     */
    public final static String s_p_regulatedEntityIdentifier = "https://onerecord.iata.org/ns/cargo#regulatedEntityIdentifier";
    public final static IRI p_regulatedEntityIdentifier = IRI.create(s_p_regulatedEntityIdentifier);
    /**
     * Remarks or Supplement Information
     * 
     */
    public final static String s_p_remarks = "https://onerecord.iata.org/ns/cargo#remarks";
    public final static IRI p_remarks = IRI.create(s_p_remarks);
    /**
     * Details of the remarks, mandatory
     * 
     */
    public final static String s_p_remarksText = "https://onerecord.iata.org/ns/cargo#remarksText";
    public final static IRI p_remarksText = IRI.create(s_p_remarksText);
    /**
     * Reportable quantities, To and from the USA only
     * 
     */
    public final static String s_p_reportableQuantity = "https://onerecord.iata.org/ns/cargo#reportableQuantity";
    public final static IRI p_reportableQuantity = IRI.create(s_p_reportableQuantity);
    /**
     * Indicates if the Booking Option is a match to the Booking Option Request preferences
     * 
     */
    public final static String s_p_requestMatch = "https://onerecord.iata.org/ns/cargo#requestMatch";
    public final static IRI p_requestMatch = IRI.create(s_p_requestMatch);
    /**
     * Salutation 
     * 
     */
    public final static String s_p_salutation = "https://onerecord.iata.org/ns/cargo#salutation";
    public final static IRI p_salutation = IRI.create(s_p_salutation);
    /**
     * Seal identifier
     * 
     */
    public final static String s_p_seal = "https://onerecord.iata.org/ns/cargo#seal";
    public final static IRI p_seal = IRI.create(s_p_seal);
    /**
     * ULD seal number if applicable
     * 
     */
    public final static String s_p_sealNumber = "https://onerecord.iata.org/ns/cargo#sealNumber";
    public final static IRI p_sealNumber = IRI.create(s_p_sealNumber);
    /**
     * Security Stamp ID
     * 
     */
    public final static String s_p_securityStampId = "https://onerecord.iata.org/ns/cargo#securityStampId";
    public final static IRI p_securityStampId = IRI.create(s_p_securityStampId);
    /**
     * Short text to detail sequence number (alphanumeric)
     * 
     */
    public final static String s_p_sequenceNumber = "https://onerecord.iata.org/ns/cargo#sequenceNumber";
    public final static IRI p_sequenceNumber = IRI.create(s_p_sequenceNumber);
    /**
     * Serial number that allows to uniquely identify the object
     * 
     */
    public final static String s_p_serialNumber = "https://onerecord.iata.org/ns/cargo#serialNumber";
    public final static IRI p_serialNumber = IRI.create(s_p_serialNumber);
    /**
     * Contains the shipper's declaration to comply with the regulations text note. Free text . This field is mandatory for air (Air)
     * 
     */
    public final static String s_p_shipperDeclarationText = "https://onerecord.iata.org/ns/cargo#shipperDeclarationText";
    public final static IRI p_shipperDeclarationText = IRI.create(s_p_shipperDeclarationText);
    /**
     * The shipper or its Agent may enter the appropriate optional shipping
     * 
     */
    public final static String s_p_shippingInfo = "https://onerecord.iata.org/ns/cargo#shippingInfo";
    public final static IRI p_shippingInfo = IRI.create(s_p_shippingInfo);
    /**
     * Shipping marks
     * 
     */
    public final static String s_p_shippingMarks = "https://onerecord.iata.org/ns/cargo#shippingMarks";
    public final static IRI p_shippingMarks = IRI.create(s_p_shippingMarks);
    /**
     * Optional shipping reference number if any
     * 
     */
    public final static String s_p_shippingRefNo = "https://onerecord.iata.org/ns/cargo#shippingRefNo";
    public final static IRI p_shippingRefNo = IRI.create(s_p_shippingRefNo);
    /**
     * Short name of the Organization if any
     * 
     */
    public final static String s_p_shortName = "https://onerecord.iata.org/ns/cargo#shortName";
    public final static IRI p_shortName = IRI.create(s_p_shortName);
    /**
     * Short text of the Question
     * 
     */
    public final static String s_p_shortText = "https://onerecord.iata.org/ns/cargo#shortText";
    public final static IRI p_shortText = IRI.create(s_p_shortText);
    /**
     * Date and time of the signature
     * 
     */
    public final static String s_p_signatureDate = "https://onerecord.iata.org/ns/cargo#signatureDate";
    public final static IRI p_signatureDate = IRI.create(s_p_signatureDate);
    /**
     * Signatory signature authentication text
     * 
     */
    public final static String s_p_signatureStatement = "https://onerecord.iata.org/ns/cargo#signatureStatement";
    public final static IRI p_signatureStatement = IRI.create(s_p_signatureStatement);
    /**
     * Indicator whether a logistics object is a skeleton object
     * 
     */
    public final static String s_p_skeletonIndicator = "https://onerecord.iata.org/ns/cargo#skeletonIndicator";
    public final static IRI p_skeletonIndicator = IRI.create(s_p_skeletonIndicator);
    /**
     * Shipper's Load And Count  ( total contained piece count as provided by shipper)
     * 
     */
    public final static String s_p_slac = "https://onerecord.iata.org/ns/cargo#slac";
    public final static IRI p_slac = IRI.create(s_p_slac);
    /**
     * Slac used for the rate described by the Line item
     * 
     */
    public final static String s_p_slacForRate = "https://onerecord.iata.org/ns/cargo#slacForRate";
    public final static IRI p_slacForRate = IRI.create(s_p_slacForRate);
    /**
     * Special conditions (box 5)
     * 
     */
    public final static String s_p_specialConditions = "https://onerecord.iata.org/ns/cargo#specialConditions";
    public final static IRI p_specialConditions = IRI.create(s_p_specialConditions);
    /**
     * A notation that the material is special form
     * 
     */
    public final static String s_p_specialFormIndicator = "https://onerecord.iata.org/ns/cargo#specialFormIndicator";
    public final static IRI p_specialFormIndicator = IRI.create(s_p_specialFormIndicator);
    /**
     * For Air Mode: Special Provision may show a single, double or triple digit number preceded by the letter A, against appropriate entries in the List of Dangerous Goods
     * 
     */
    public final static String s_p_specialProvisionId = "https://onerecord.iata.org/ns/cargo#specialProvisionId";
    public final static IRI p_specialProvisionId = IRI.create(s_p_specialProvisionId);
    /**
     * Special service requests
     * 
     */
    public final static String s_p_specialServiceRequests = "https://onerecord.iata.org/ns/cargo#specialServiceRequests";
    public final static IRI p_specialServiceRequests = IRI.create(s_p_specialServiceRequests);
    /**
     * Species common name (box 8)
     * 
     */
    public final static String s_p_speciesCommonName = "https://onerecord.iata.org/ns/cargo#speciesCommonName";
    public final static IRI p_speciesCommonName = IRI.create(s_p_speciesCommonName);
    /**
     * Species scientific name (box 7)
     * 
     */
    public final static String s_p_speciesScientificName = "https://onerecord.iata.org/ns/cargo#speciesScientificName";
    public final static IRI p_speciesScientificName = IRI.create(s_p_speciesScientificName);
    /**
     * Description of specimens, including age and sex if LA (box 9)
     * 
     */
    public final static String s_p_specimenDescription = "https://onerecord.iata.org/ns/cargo#specimenDescription";
    public final static IRI p_specimenDescription = IRI.create(s_p_specimenDescription);
    /**
     * Stackable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_stackable = "https://onerecord.iata.org/ns/cargo#stackable";
    public final static IRI p_stackable = IRI.create(s_p_stackable);
    /**
     * Short text stating the exact place of storage
     * 
     */
    public final static String s_p_storagePlaceIdentifier = "https://onerecord.iata.org/ns/cargo#storagePlaceIdentifier";
    public final static IRI p_storagePlaceIdentifier = IRI.create(s_p_storagePlaceIdentifier);
    /**
     * Short text holding the process number if necessary
     * 
     */
    public final static String s_p_storingIdentifier = "https://onerecord.iata.org/ns/cargo#storingIdentifier";
    public final static IRI p_storingIdentifier = IRI.create(s_p_storingIdentifier);
    /**
     * Street address including street name, street number, building number, apartment etc
     * 
     */
    public final static String s_p_streetAddressLines = "https://onerecord.iata.org/ns/cargo#streetAddressLines";
    public final static IRI p_streetAddressLines = IRI.create(s_p_streetAddressLines);
    /**
     * Subtotal of the charge
     * 
     */
    public final static String s_p_subTotal = "https://onerecord.iata.org/ns/cargo#subTotal";
    public final static IRI p_subTotal = IRI.create(s_p_subTotal);
    /**
     * Additional information that may be added in addition to the proper shipping name to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_supplementaryInfoPrefix = "https://onerecord.iata.org/ns/cargo#supplementaryInfoPrefix";
    public final static IRI p_supplementaryInfoPrefix = IRI.create(s_p_supplementaryInfoPrefix);
    /**
     * Additional information that may be added in addition to the proper shipping to more fully describe the goods or to identify a particular condition
     * 
     */
    public final static String s_p_supplementaryInfoSuffix = "https://onerecord.iata.org/ns/cargo#supplementaryInfoSuffix";
    public final static IRI p_supplementaryInfoSuffix = IRI.create(s_p_supplementaryInfoSuffix);
    /**
     * This is additional chemical name(s) required for some proper shipping names. When added the technical must be shown in parentheses immediately following the proper shipping name. 
     * 
     */
    public final static String s_p_technicalName = "https://onerecord.iata.org/ns/cargo#technicalName";
    public final static IRI p_technicalName = IRI.create(s_p_technicalName);
    /**
     * Purpose of the template
     * 
     */
    public final static String s_p_templatePurpose = "https://onerecord.iata.org/ns/cargo#templatePurpose";
    public final static IRI p_templatePurpose = IRI.create(s_p_templatePurpose);
    /**
     * Text for the Answer
     * 
     */
    public final static String s_p_text = "https://onerecord.iata.org/ns/cargo#text";
    public final static IRI p_text = IRI.create(s_p_text);
    /**
     * Strings to provide free text handling instructions such as SSR and OSI
     * 
     */
    public final static String s_p_textualHandlingInstructions = "https://onerecord.iata.org/ns/cargo#textualHandlingInstructions";
    public final static IRI p_textualHandlingInstructions = IRI.create(s_p_textualHandlingInstructions);
    /**
     * Textual value filled on use context (eg. characteristic colour, contactDetail mail adress, etc.)
     * 
     */
    public final static String s_p_textualValue = "https://onerecord.iata.org/ns/cargo#textualValue";
    public final static IRI p_textualValue = IRI.create(s_p_textualValue);
    /**
     * Time of availability of the shipment as per CargoIQ definition
     * 
     */
    public final static String s_p_timeOfAvailability = "https://onerecord.iata.org/ns/cargo#timeOfAvailability";
    public final static IRI p_timeOfAvailability = IRI.create(s_p_timeOfAvailability);
    /**
     * Total transit time as per CargoIQ definition, expressed as a duration
     * 
     */
    public final static String s_p_totalTransitTime = "https://onerecord.iata.org/ns/cargo#totalTransitTime";
    public final static IRI p_totalTransitTime = IRI.create(s_p_totalTransitTime);
    /**
     * Purpose of the transaction in free text (box 5a)
     * 
     */
    public final static String s_p_transactionPurpose = "https://onerecord.iata.org/ns/cargo#transactionPurpose";
    public final static IRI p_transactionPurpose = IRI.create(s_p_transactionPurpose);
    /**
     * Reference to the Air Waybill or other transport contract document (box 15)
     * 
     */
    public final static String s_p_transportContractId = "https://onerecord.iata.org/ns/cargo#transportContractId";
    public final static IRI p_transportContractId = IRI.create(s_p_transportContractId);
    /**
     * Airline flight number, or rail/truck/maritime line id
     * 
     */
    public final static String s_p_transportIdentifier = "https://onerecord.iata.org/ns/cargo#transportIdentifier";
    public final static IRI p_transportIdentifier = IRI.create(s_p_transportIdentifier);
    /**
     * Radioactive Transport-Index value of the package or all packed in one. Conditionally mandator and applies to categories II-Yellow and III-Yellow only; field only contains the value, if printed, TI must be added as a prefix to the value  to be printed in the Packing Instructions column
     * 
     */
    public final static String s_p_transportIndexNumeric = "https://onerecord.iata.org/ns/cargo#transportIndexNumeric";
    public final static IRI p_transportIndexNumeric = IRI.create(s_p_transportIndexNumeric);
    /**
     * Turnable indicator for the pieces (boolean)
     * 
     */
    public final static String s_p_turnable = "https://onerecord.iata.org/ns/cargo#turnable";
    public final static IRI p_turnable = IRI.create(s_p_turnable);
    /**
     * Serial number that allows to uniquely identify the ULD
     * 
     */
    public final static String s_p_uldSerialNumber = "https://onerecord.iata.org/ns/cargo#uldSerialNumber";
    public final static IRI p_uldSerialNumber = IRI.create(s_p_uldSerialNumber);
    /**
     * Reference identifying the United Nations Dangerous Goods serial number assigned within the UN to substances and articles contained in a list of the dangerous goods most commonly carried. e.g. 1189 - Ethylene glycol monomethyl ether acetate
     * 
     */
    public final static String s_p_unNumber = "https://onerecord.iata.org/ns/cargo#unNumber";
    public final static IRI p_unNumber = IRI.create(s_p_unNumber);
    /**
     * Manufacturer's unique product identifier
     * 
     */
    public final static String s_p_uniqueIdentifier = "https://onerecord.iata.org/ns/cargo#uniqueIdentifier";
    public final static IRI p_uniqueIdentifier = IRI.create(s_p_uniqueIdentifier);
    /**
     * Specific commodity code linked to commodity
     * 
     */
    public final static String s_p_unitBasis = "https://onerecord.iata.org/ns/cargo#unitBasis";
    public final static IRI p_unitBasis = IRI.create(s_p_unitBasis);
    /**
     * Unique Piece Identifier (UPID) of the piece. Refer IATA Recommended Practice 1689
     * 
     */
    public final static String s_p_upid = "https://onerecord.iata.org/ns/cargo#upid";
    public final static IRI p_upid = IRI.create(s_p_upid);
    /**
     * total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 11a)
     * 
     */
    public final static String s_p_usedToDateQuotaQuantity = "https://onerecord.iata.org/ns/cargo#usedToDateQuotaQuantity";
    public final static IRI p_usedToDateQuotaQuantity = IRI.create(s_p_usedToDateQuotaQuantity);
    /**
     * Validity start date based on usage context
     * 
     */
    public final static String s_p_validFrom = "https://onerecord.iata.org/ns/cargo#validFrom";
    public final static IRI p_validFrom = IRI.create(s_p_validFrom);
    /**
     * Validity end date (date of expiry) based on usage context
     * 
     */
    public final static String s_p_validUntil = "https://onerecord.iata.org/ns/cargo#validUntil";
    public final static IRI p_validUntil = IRI.create(s_p_validUntil);
    /**
     * Indicate if subject to VAT (boolean)
     * 
     */
    public final static String s_p_vatIndicator = "https://onerecord.iata.org/ns/cargo#vatIndicator";
    public final static IRI p_vatIndicator = IRI.create(s_p_vatIndicator);
    /**
     * Model or make of the vehicle (e.g. A33-3)
     * 
     */
    public final static String s_p_vehicleModel = "https://onerecord.iata.org/ns/cargo#vehicleModel";
    public final static IRI p_vehicleModel = IRI.create(s_p_vehicleModel);
    /**
     * Vehicle identification - e.g. aircraft registration number
     * 
     */
    public final static String s_p_vehicleRegistration = "https://onerecord.iata.org/ns/cargo#vehicleRegistration";
    public final static IRI p_vehicleRegistration = IRI.create(s_p_vehicleRegistration);
    /**
     * Size of the vehicle - free text
     * 
     */
    public final static String s_p_vehicleSize = "https://onerecord.iata.org/ns/cargo#vehicleSize";
    public final static IRI p_vehicleSize = IRI.create(s_p_vehicleSize);
    /**
     * Version of the template
     * 
     */
    public final static String s_p_version = "https://onerecord.iata.org/ns/cargo#version";
    public final static IRI p_version = IRI.create(s_p_version);
    /**
     * House or Master Waybill unique identifier
     * 
     */
    public final static String s_p_waybillNumber = "https://onerecord.iata.org/ns/cargo#waybillNumber";
    public final static IRI p_waybillNumber = IRI.create(s_p_waybillNumber);
    /**
     * Prefix used for the Waybill Number. Refer to IATA Airlines Codes
     * 
     */
    public final static String s_p_waybillPrefix = "https://onerecord.iata.org/ns/cargo#waybillPrefix";
    public final static IRI p_waybillPrefix = IRI.create(s_p_waybillPrefix);
    public final static String s_p_description_A = "http://purl.org/dc/elements/1.1/description";
    public final static IRI p_description_A = IRI.create(s_p_description_A);
    public final static String s_p_title = "http://purl.org/dc/elements/1.1/title";
    public final static IRI p_title = IRI.create(s_p_title);
    public final static String s_p__abstract = "http://purl.org/dc/terms/abstract";
    public final static IRI p__abstract = IRI.create(s_p__abstract);
    public final static String s_p_modified = "http://purl.org/dc/terms/modified";
    public final static IRI p_modified = IRI.create(s_p_modified);
    public final static String s_p_title_A = "http://purl.org/dc/terms/title";
    public final static IRI p_title_A = IRI.create(s_p_title_A);
    public final static String s_p_comment = "http://www.w3.org/2000/01/rdf-schema#comment";
    public final static IRI p_comment = IRI.create(s_p_comment);
    public final static String s_p_label = "http://www.w3.org/2000/01/rdf-schema#label";
    public final static IRI p_label = IRI.create(s_p_label);
    public final static String s_p_comment_A = "http://www.w3.org/2002/07/owl#comment";
    public final static IRI p_comment_A = IRI.create(s_p_comment_A);
    public final static String s_p_maxCardinality = "http://www.w3.org/2002/07/owl#maxCardinality";
    public final static IRI p_maxCardinality = IRI.create(s_p_maxCardinality);
    public final static String s_p_minCardinality = "http://www.w3.org/2002/07/owl#minCardinality";
    public final static IRI p_minCardinality = IRI.create(s_p_minCardinality);
    /**
     * Indicates the sensor type as accelerometer
     * 
     */
    public final static String s_i_ACCELEROMETER = "https://onerecord.iata.org/ns/cargo#ACCELEROMETER";
    public final static IRI i_ACCELEROMETER = IRI.create(s_i_ACCELEROMETER);
    /**
     * Used when a LogisticsActivity is active
     * 
     */
    public final static String s_i_ACTIVE = "https://onerecord.iata.org/ns/cargo#ACTIVE";
    public final static IRI i_ACTIVE = IRI.create(s_i_ACTIVE);
    /**
     * Used when a time is actual
     * 
     */
    public final static String s_i_ACTUAL = "https://onerecord.iata.org/ns/cargo#ACTUAL";
    public final static IRI i_ACTUAL = IRI.create(s_i_ACTUAL);
    /**
     * Indicates a contact detail as alternate email address
     * 
     */
    public final static String s_i_ALTERNATE_EMAIL_ADDRESS = "https://onerecord.iata.org/ns/cargo#ALTERNATE_EMAIL_ADDRESS";
    public final static IRI i_ALTERNATE_EMAIL_ADDRESS = IRI.create(s_i_ALTERNATE_EMAIL_ADDRESS);
    /**
     * Indicates a contact detail as alternate phone number
     * 
     */
    public final static String s_i_ALTERNATE_PHONE_NUMBER = "https://onerecord.iata.org/ns/cargo#ALTERNATE_PHONE_NUMBER";
    public final static IRI i_ALTERNATE_PHONE_NUMBER = IRI.create(s_i_ALTERNATE_PHONE_NUMBER);
    /**
     * Used when a booking option (or proposal) is bookable
     * 
     */
    public final static String s_i_BOOKABLE = "https://onerecord.iata.org/ns/cargo#BOOKABLE";
    public final static IRI i_BOOKABLE = IRI.create(s_i_BOOKABLE);
    /**
     * Used when a booking option proposal is booked
     * 
     */
    public final static String s_i_BOOKED = "https://onerecord.iata.org/ns/cargo#BOOKED";
    public final static IRI i_BOOKED = IRI.create(s_i_BOOKED);
    /**
     * Indicates the load type as bulk
     * 
     */
    public final static String s_i_BULK = "https://onerecord.iata.org/ns/cargo#BULK";
    public final static IRI i_BULK = IRI.create(s_i_BULK);
    /**
     * Used when a LogisticsActivity is cancelled
     * 
     */
    public final static String s_i_CANCELLED = "https://onerecord.iata.org/ns/cargo#CANCELLED";
    public final static IRI i_CANCELLED = IRI.create(s_i_CANCELLED);
    /**
     * Used when a LogisticsActivity is complete
     * 
     */
    public final static String s_i_COMPLETE = "https://onerecord.iata.org/ns/cargo#COMPLETE";
    public final static IRI i_COMPLETE = IRI.create(s_i_COMPLETE);
    /**
     * Describes a composition, for example the loading of a container or the build-up of an ULD
     * 
     */
    public final static String s_i_COMPOSITION = "https://onerecord.iata.org/ns/cargo#COMPOSITION";
    public final static IRI i_COMPOSITION = IRI.create(s_i_COMPOSITION);
    /**
     * Used when a booking is confirmed
     * 
     */
    public final static String s_i_CONFIRMED = "https://onerecord.iata.org/ns/cargo#CONFIRMED";
    public final static IRI i_CONFIRMED = IRI.create(s_i_CONFIRMED);
    /**
     * Indicates a contact person as customer contact
     * 
     */
    public final static String s_i_CUSTOMER_CONTACT = "https://onerecord.iata.org/ns/cargo#CUSTOMER_CONTACT";
    public final static IRI i_CUSTOMER_CONTACT = IRI.create(s_i_CUSTOMER_CONTACT);
    /**
     * Indicates a contact person as customs contact
     * 
     */
    public final static String s_i_CUSTOMS_CONTACT = "https://onerecord.iata.org/ns/cargo#CUSTOMS_CONTACT";
    public final static IRI i_CUSTOMS_CONTACT = IRI.create(s_i_CUSTOMS_CONTACT);
    /**
     * Describes a decomposition, for example the unloading of a container or the break-down of an ULD
     * 
     */
    public final static String s_i_DECOMPOSITION = "https://onerecord.iata.org/ns/cargo#DECOMPOSITION";
    public final static IRI i_DECOMPOSITION = IRI.create(s_i_DECOMPOSITION);
    /**
     * Used when a booking is deleted
     * 
     */
    public final static String s_i_DELETED = "https://onerecord.iata.org/ns/cargo#DELETED";
    public final static IRI i_DELETED = IRI.create(s_i_DELETED);
    /**
     * Indicates a Direct waybill
     * 
     */
    public final static String s_i_DIRECT = "https://onerecord.iata.org/ns/cargo#DIRECT";
    public final static IRI i_DIRECT = IRI.create(s_i_DIRECT);
    /**
     * Indicates a contact detail as email address
     * 
     */
    public final static String s_i_EMAIL_ADDRESS = "https://onerecord.iata.org/ns/cargo#EMAIL_ADDRESS";
    public final static IRI i_EMAIL_ADDRESS = IRI.create(s_i_EMAIL_ADDRESS);
    /**
     * Indicates a contact person as emergency contact
     * 
     */
    public final static String s_i_EMERGENCY_CONTACT = "https://onerecord.iata.org/ns/cargo#EMERGENCY_CONTACT";
    public final static IRI i_EMERGENCY_CONTACT = IRI.create(s_i_EMERGENCY_CONTACT);
    /**
     * Used when a time is estimated
     * 
     */
    public final static String s_i_ESTIMATED = "https://onerecord.iata.org/ns/cargo#ESTIMATED";
    public final static IRI i_ESTIMATED = IRI.create(s_i_ESTIMATED);
    /**
     * Used when a time is expected
     * 
     */
    public final static String s_i_EXPECTED = "https://onerecord.iata.org/ns/cargo#EXPECTED";
    public final static IRI i_EXPECTED = IRI.create(s_i_EXPECTED);
    /**
     * Used when a booking option proposal is expired
     * 
     */
    public final static String s_i_EXPIRED = "https://onerecord.iata.org/ns/cargo#EXPIRED";
    public final static IRI i_EXPIRED = IRI.create(s_i_EXPIRED);
    /**
     * Indicates a contact detail as fax number
     * 
     */
    public final static String s_i_FAX_NUMBER = "https://onerecord.iata.org/ns/cargo#FAX_NUMBER";
    public final static IRI i_FAX_NUMBER = IRI.create(s_i_FAX_NUMBER);
    /**
     * Indicates the sensor type as geolocation
     * 
     */
    public final static String s_i_GEOLOCATION = "https://onerecord.iata.org/ns/cargo#GEOLOCATION";
    public final static IRI i_GEOLOCATION = IRI.create(s_i_GEOLOCATION);
    /**
     * Indicates a House Waybill
     * 
     */
    public final static String s_i_HOUSE = "https://onerecord.iata.org/ns/cargo#HOUSE";
    public final static IRI i_HOUSE = IRI.create(s_i_HOUSE);
    /**
     * Indicates the sensor type as humidity
     * 
     */
    public final static String s_i_HUMIDITY = "https://onerecord.iata.org/ns/cargo#HUMIDITY";
    public final static IRI i_HUMIDITY = IRI.create(s_i_HUMIDITY);
    /**
     * Indicates the described direction in a movement time as inbound
     * 
     */
    public final static String s_i_INBOUND = "https://onerecord.iata.org/ns/cargo#INBOUND";
    public final static IRI i_INBOUND = IRI.create(s_i_INBOUND);
    /**
     * Indicates the sensor type as light
     * 
     */
    public final static String s_i_LIGHT = "https://onerecord.iata.org/ns/cargo#LIGHT";
    public final static IRI i_LIGHT = IRI.create(s_i_LIGHT);
    /**
     * Describes a loading process, for example putting an ULD on an aircraft or a piece in a truck
     * 
     */
    public final static String s_i_LOADING = "https://onerecord.iata.org/ns/cargo#LOADING";
    public final static IRI i_LOADING = IRI.create(s_i_LOADING);
    /**
     * Indicates the load type as loose
     * 
     */
    public final static String s_i_LOOSE = "https://onerecord.iata.org/ns/cargo#LOOSE";
    public final static IRI i_LOOSE = IRI.create(s_i_LOOSE);
    /**
     * Indicates the mode qualifier as main carriage
     * 
     */
    public final static String s_i_MAIN_CARRIAGE = "https://onerecord.iata.org/ns/cargo#MAIN_CARRIAGE";
    public final static IRI i_MAIN_CARRIAGE = IRI.create(s_i_MAIN_CARRIAGE);
    /**
     * Indicates a Master Waybill
     * 
     */
    public final static String s_i_MASTER = "https://onerecord.iata.org/ns/cargo#MASTER";
    public final static IRI i_MASTER = IRI.create(s_i_MASTER);
    /**
     * Used when a booking option is nonbookable
     * 
     */
    public final static String s_i_NONBOOKABLE = "https://onerecord.iata.org/ns/cargo#NONBOOKABLE";
    public final static IRI i_NONBOOKABLE = IRI.create(s_i_NONBOOKABLE);
    /**
     * Used when a booking option proposal is not bookable
     * 
     */
    public final static String s_i_NOT_BOOKABLE = "https://onerecord.iata.org/ns/cargo#NOT_BOOKABLE";
    public final static IRI i_NOT_BOOKABLE = IRI.create(s_i_NOT_BOOKABLE);
    /**
     * Indicates the mode qualifier as on carriage
     * 
     */
    public final static String s_i_ON_CARRIAGE = "https://onerecord.iata.org/ns/cargo#ON_CARRIAGE";
    public final static IRI i_ON_CARRIAGE = IRI.create(s_i_ON_CARRIAGE);
    /**
     * Used when a booking option proposal is on request
     * 
     */
    public final static String s_i_ON_REQUEST = "https://onerecord.iata.org/ns/cargo#ON_REQUEST";
    public final static IRI i_ON_REQUEST = IRI.create(s_i_ON_REQUEST);
    /**
     * Indicates the described direction in a movement time as outbound
     * 
     */
    public final static String s_i_OUTBOUND = "https://onerecord.iata.org/ns/cargo#OUTBOUND";
    public final static IRI i_OUTBOUND = IRI.create(s_i_OUTBOUND);
    /**
     * Indicates the load type as pallet
     * 
     */
    public final static String s_i_PALLET = "https://onerecord.iata.org/ns/cargo#PALLET";
    public final static IRI i_PALLET = IRI.create(s_i_PALLET);
    /**
     * Used when a LogisticsActivity is pending
     * 
     */
    public final static String s_i_PENDING = "https://onerecord.iata.org/ns/cargo#PENDING";
    public final static IRI i_PENDING = IRI.create(s_i_PENDING);
    /**
     * Indicates a contact detail as phone number
     * 
     */
    public final static String s_i_PHONE_NUMBER = "https://onerecord.iata.org/ns/cargo#PHONE_NUMBER";
    public final static IRI i_PHONE_NUMBER = IRI.create(s_i_PHONE_NUMBER);
    /**
     * Used when a time is planned
     * 
     */
    public final static String s_i_PLANNED = "https://onerecord.iata.org/ns/cargo#PLANNED";
    public final static IRI i_PLANNED = IRI.create(s_i_PLANNED);
    /**
     * Indicates the sensor type as pressure
     * 
     */
    public final static String s_i_PRESSURE = "https://onerecord.iata.org/ns/cargo#PRESSURE";
    public final static IRI i_PRESSURE = IRI.create(s_i_PRESSURE);
    /**
     * Indicates the mode qualifier as pre carriage
     * 
     */
    public final static String s_i_PRE_CARRIAGE = "https://onerecord.iata.org/ns/cargo#PRE_CARRIAGE";
    public final static IRI i_PRE_CARRIAGE = IRI.create(s_i_PRE_CARRIAGE);
    /**
     * Used when a booking or booking option is queued or pending
     * 
     */
    public final static String s_i_QUEUED = "https://onerecord.iata.org/ns/cargo#QUEUED";
    public final static IRI i_QUEUED = IRI.create(s_i_QUEUED);
    /**
     * Used when a booking is rejected
     * 
     */
    public final static String s_i_REJECTED = "https://onerecord.iata.org/ns/cargo#REJECTED";
    public final static IRI i_REJECTED = IRI.create(s_i_REJECTED);
    /**
     * Used when a time is requested
     * 
     */
    public final static String s_i_REQUESTED = "https://onerecord.iata.org/ns/cargo#REQUESTED";
    public final static IRI i_REQUESTED = IRI.create(s_i_REQUESTED);
    /**
     * Used when a time is scheduled
     * 
     */
    public final static String s_i_SCHEDULED = "https://onerecord.iata.org/ns/cargo#SCHEDULED";
    public final static IRI i_SCHEDULED = IRI.create(s_i_SCHEDULED);
    /**
     * Describes a store-in process, where a physical object is assigned to a specific location
     * 
     */
    public final static String s_i_STORE_IN = "https://onerecord.iata.org/ns/cargo#STORE_IN";
    public final static IRI i_STORE_IN = IRI.create(s_i_STORE_IN);
    /**
     * Describes a store-out process, where a physical object leaves a specific location
     * 
     */
    public final static String s_i_STORE_OUT = "https://onerecord.iata.org/ns/cargo#STORE_OUT";
    public final static IRI i_STORE_OUT = IRI.create(s_i_STORE_OUT);
    /**
     * Indicates a contact detail as telex
     * 
     */
    public final static String s_i_TELEX = "https://onerecord.iata.org/ns/cargo#TELEX";
    public final static IRI i_TELEX = IRI.create(s_i_TELEX);
    /**
     * Indicates the sensor type as thermometer
     * 
     */
    public final static String s_i_THERMOMETER = "https://onerecord.iata.org/ns/cargo#THERMOMETER";
    public final static IRI i_THERMOMETER = IRI.create(s_i_THERMOMETER);
    /**
     * Indicates the sensor type as tilt
     * 
     */
    public final static String s_i_TILT = "https://onerecord.iata.org/ns/cargo#TILT";
    public final static IRI i_TILT = IRI.create(s_i_TILT);
    /**
     * Indicates the load type as uld
     * 
     */
    public final static String s_i_UNIT_LOAD_DEVICE = "https://onerecord.iata.org/ns/cargo#UNIT_LOAD_DEVICE";
    public final static IRI i_UNIT_LOAD_DEVICE = IRI.create(s_i_UNIT_LOAD_DEVICE);
    /**
     * Describes an unloading process, for example removing an ULD from an aircraft or a piece from a truck
     * 
     */
    public final static String s_i_UNLOADING = "https://onerecord.iata.org/ns/cargo#UNLOADING";
    public final static IRI i_UNLOADING = IRI.create(s_i_UNLOADING);
    /**
     * Indicates the that the movement time describes an unplanned stop
     * 
     */
    public final static String s_i_UNPLANNED_STOP = "https://onerecord.iata.org/ns/cargo#UNPLANNED_STOP";
    public final static IRI i_UNPLANNED_STOP = IRI.create(s_i_UNPLANNED_STOP);
    /**
     * Indicates the sensor type as vibration
     * 
     */
    public final static String s_i_VIBRATION = "https://onerecord.iata.org/ns/cargo#VIBRATION";
    public final static IRI i_VIBRATION = IRI.create(s_i_VIBRATION);
    /**
     * Indicates a contact detail as website
     * 
     */
    public final static String s_i_WEBSITE = "https://onerecord.iata.org/ns/cargo#WEBSITE";
    public final static IRI i_WEBSITE = IRI.create(s_i_WEBSITE);

}
